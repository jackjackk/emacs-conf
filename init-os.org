* OS integration
:PROPERTIES:
:header-args: :tangle   lisp/init-os.el
:END:

| ~M-x open-folder-in-explorer~ | Open explorer in the current directory selecting the current file.  |
| ~M-x open-cmd-at-folder~      | Open cmd prompt in the directory of the file in the current buffer. |
| ~M-x view-buffer-in-firefox~  | Open the file in the current buffer with Firefox.                   |

| ~C-ret~                       | Open the file in dired with default window manager application.     |

Under Windows use portable UnxUtils for grep and find.
#+BEGIN_SRC emacs-lisp
(when (or (eq system-type 'windows-nt) (eq system-type 'msdos))
      (setenv "PATH" (concat (getenv "USERPROFILE") "\\portables\\CygwinPortable\\App\\Runtime\\Cygwin\\bin;" (getenv "PATH")))
      (setq find-program (concat (getenv "USERPROFILE") "\\portables\\CygwinPortable\\App\\Runtime\\Cygwin\\bin\\find.exe")
            grep-program (concat (getenv "USERPROFILE") "\\portables\\CygwinPortable\\App\\Runtime\\Cygwin\\bin\\grep.exe")))
#+END_SRC

Avoid using "find" when using grep (Windows uses by default a non-POSIX-compatible find).
#+BEGIN_SRC emacs-lisp
(setq grep-find-command "egrep -nHIr ")
#+END_SRC

Other grep settings TO BE CHECKED.
#+BEGIN_SRC emacs-lisp
;(keyboard-translate ?\C-i ?\H-i)
;(global-set-key [?\H-i] 'grep-find)
;(grep-apply-setting 'grep-command "grep -r --include=\"!\" -nH -e ! .")
;(setq grep-command  "grep -r --include=\"!\" -nH -e ! .")
#+END_SRC

The section below is inspired by https://github.com/kosh04/emacs-lisp/blob/master/gnome-util.el.

Open explorer in the current directory selecting the current file.
#+BEGIN_SRC elisp
(defun open-folder-in-explorer ()  
  "Call when editing a file in a buffer. Open explorer in the current directory and select the current file"  
  (interactive)  
  (cond ((eq window-system 'w32)
         (w32-shell-execute 
          "open" "explorer"  
          (concat "/e,/select," (convert-standard-filename buffer-file-name))
          ))
        (t
         (call-process "nautilus" nil 0 nil
                       (expand-file-name
                        (or dir default-directory)))
         ;;(let ((process-connection-type nil)) (start-process "" nil "xdg-open" "."))
         ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. with nautilus
        ))
)
#+END_SRC

Open cmd prompt in the directory of the file in the current buffer.
#+BEGIN_SRC elisp
(defun open-cmd-at-folder ()  
  "Call when editing a file in a buffer. Open a shell in the current directory and select the current file"  
  (interactive)  
  (cond ((eq window-system 'w32)
         (w32-shell-execute 
          "open" "cmd"  
          (concat "/K cd \"" (file-name-directory (buffer-file-name)) "\"")))
        (t
         (call-process "gnome-terminal" nil 0 nil default-directory)))
)

#+END_SRC

Open the file in the current buffer with Firefox.
#+BEGIN_SRC elisp
(defun view-buffer-in-firefox ()  
  "Call when editing a file in a buffer. Open windows explorer in the current directory and select the current file"  
  (interactive)  
  (cond ((eq window-system 'w32)
         (w32-shell-execute 
          "open" "firefox"  
          (convert-standard-filename buffer-file-name)))
         (t
          (call-process "firefox" nil 0 nil (expand-file-name
                        (or dir default-directory)))))
)
#+END_SRC

Open the file in dired with default window manager application (~C-ret~).
#+BEGIN_SRC elisp
  (defun dired-open-file ()
    "In dired, open the file named on this line."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (message "Opening %s..." file)
      (cond ((eq window-system 'w32)
             (w32-shell-execute "open" file))
            ((eq system-type 'darwin)
             (call-process "open" nil 0 nil file))
            (t
             (call-process "xdg-open" nil 0 nil file)))
      (message "Opening %s done" file)))

  (add-hook 'dired-mode-hook
        '(lambda ()
           (define-key dired-mode-map (kbd "<C-return>") 'dired-open-file)))
#+END_SRC

For MacOS
#+BEGIN_SRC emacs-lisp
(setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.11/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")
#+END_SRC

Shell
#+BEGIN_SRC emacs-lisp
  (cond ((eq system-type 'darwin)
         (setq explicit-shell-file-name "/usr/bin/bash")
         (setq shell-file-name "bash")
         (setq explicit-bash-args '("--noediting" "--login" "-i"))
         (setenv "SHELL" shell-file-name)
         (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)))
#+END_SRC

** TBD
#+BEGIN_SRC elisp
(defvar open-program-name
  (cond ((eq window-system 'w32)
         "open")
        (t
         (if (executable-find "xdg-open")
             "xdg-open"
           "gnome-open"))
        ))

(defun shell-execute (filename &optional directory params)
"Open filename in shell"
(setq filename (expand-file-name filename))
(let ((default-directory (or directory default-directory)))
  (apply #'call-process open-program-name
         nil 0 nil filename params)))

#+END_SRC
