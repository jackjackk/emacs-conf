#+OPTIONS: toc:t h:4 num:nil
#+PROPERTY: header-args :results silent

* My emacs configuration

Cumulated over years, all the elisp configuration lines I found interesting for
my workflow in their tidiest form I could come up with, both for Windows and
Linux.

* Usage
Simplest way: save your current configuration and clone this repository in its place.
#+BEGIN_SRC sh
mv ~/.emacs.d ~/.emacs.d.bak
mv ~/.emacs ~/.emacs.bak
git clone https://github.com/jackjackk/emacs-conf.git ~/.emacs.d
#+END_SRC
Other strategies to merge an existing directory with a git repo can be found [[http://stackoverflow.com/questions/5377960/whats-the-best-practice-to-git-clone-into-an-existing-folder][here]]. In particular:
#+BEGIN_SRC sh
git clone https://github.com/jackjackk/emacs-conf.git ~/.emacs.d/.git --mirror --config core.bare=false
#+END_SRC
will transform your emacs conf dir in a working copy of this repository.

* Description
** The main file (~init.el~)
:PROPERTIES:
:tangle:   init.el
:END:
All conf code is self-contained in =~/.emacs.d= dir. If no =~/.emacs= file is
found, emacs will use =~/.emacs.d/init.el=. This in turn call other files in a modular fashion.
First, customize built-in features.
#+BEGIN_SRC elisp
(add-to-list 'load-path "~/.emacs.d/")

(load-library "init-startup.el")
(load-library "init-general.el")
(load-library "init-visual.el")
(load-library "init-text.el")
(load-library "init-os.el")
(load-library "init-python.el")
(load-library "init-latex.el")
#+END_SRC

Then add extra packages, either from repositories or from local subfolders.
#+BEGIN_SRC elisp
;; * Extra packages
;; ** from repositories
(setq package-list '(helm
                     yasnippet
                     expand-region
                     multiple-cursors
                     org
;                     org-redmine
                     org-pomodoro
                     org2blog
;                     websocket
;                     ein
                     bm
                     zotelo
))
;; ** from local subfolders 
(setq other-package-list '(gams
                           matlab))
(load-library "init-packages.el")
#+END_SRC
Make sure you *select just the packages you are interested in*, otherwise be aware that all missing packages on repositories will be downloaded and installed on startup, which requires time + internet bandwidth.
** Customizing built-in features
*** Startup (~init-startup.el~)
:PROPERTIES:
:tangle:   init-startup.el
:END:

Allow Emacs to accept client processes (e.g. an external IPython console with ~emacsclient~ as editor).
#+BEGIN_SRC elisp
(server-start)
#+END_SRC

Remove startup messages and clean the scratch buffer.
#+BEGIN_SRC elisp
(setq inhibit-startup-message t
      inhibit-splash-screen t
      initial-scratch-message nil)
#+END_SRC
*** General (~init-general.el~)
:PROPERTIES:
:tangle:   init-general.el
:END:

One-character yes-no answer.
#+BEGIN_SRC elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Save all tempfiles in ~$TMPDIR/emacs$UID/~.
#+BEGIN_SRC elisp
(defconst emacs-tmp-dir (format "%s%s%s/" temporary-file-directory "emacs" (user-uid)))
(setq backup-directory-alist
    `((".*" . ,emacs-tmp-dir)))
(setq auto-save-file-name-transforms
    `((".*" ,emacs-tmp-dir t)))
(setq auto-save-list-file-prefix
    emacs-tmp-dir)
#+END_SRC

Distinguish ~C-i~ and ~tab~.
#+BEGIN_SRC elisp
(setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))
#+END_SRC

Enable automatic saving of the desktop (i.e. the buffers, their file names,
major modes, buffer positions, ...) when you exit Emacs, and automatic
restoration of the last saved desktop when Emacs starts
#+BEGIN_SRC elisp
(desktop-save-mode 1)
#+END_SRC

Set convenient Dired switches.
#+BEGIN_SRC elisp
(setq dired-listing-switches "-alh")
#+END_SRC

**** Key-bindings
| ~C-S-s~     | Save all files at once.                         |
| ~f5~        | Revert buffer w/o confirmation.                 |
| ~C-tab~     | Switch focus to other window.                   |
| ~C-S-tab~   | Switch focus to other window in reverse.        |
| ~C-0~       | Delete current window and switches to previous. |
| ~C-1~       | Expand current window.                          |
| ~C-S-left~  | Shrink window horizontally.                     |
| ~C-S-right~ | Enlarge window horizontally.                    |
| ~C-S-up~    | Shrink window vertically.                       |
| ~C-S-down~  | Enlarge window vertically.                      |

#+BEGIN_SRC elisp
(defun save-all () (interactive) (save-some-buffers t))
(global-set-key (kbd "C-S-s") 'save-all)

(defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))
(global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)

(global-set-key (kbd "<C-tab>") 'other-window)

(fset 'other-window-reverse
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("-1o" 0 "%d")) arg)))
(global-set-key (kbd "<C-S-iso-lefttab>") 'other-window-reverse)

(defun delete-window-switch-previous()
  "Delete a window and give focus to the previous window"
  (interactive)
  (call-interactively 'delete-window)
  (call-interactively 'other-window-reverse)
)
(global-set-key (kbd "C-0") 'delete-window-switch-previous)

(defun expand-window()
  "Update current workgroup config, then delete other windows"
  (interactive)
;  (call-interactively 'wg-update-workgroup)
  (delete-other-windows)
)
(global-set-key (kbd "C-1") 'expand-window)

(global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-S-<down>") 'enlarge-window)
(global-set-key (kbd "C-S-<up>") 'shrink-window)
#+END_SRC
*** Visual (~init-visual.el~)
:PROPERTIES:
:tangle:   init-visual.el
:END:

Divide long logical line into two or more screen lines in ~text~ mode.
#+BEGIN_SRC elisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

Turn off potentially distracting things: the scroll bar, menu bar, tool bar, and the blinking of the cursor.
#+BEGIN_SRC elisp
(menu-bar-mode t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode -1)
#+END_SRC

Turn on potentially useful things: empty line markers, line/column numbers, matching parentheses highlight.
#+BEGIN_SRC elisp
(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))
(line-number-mode 1)
(column-number-mode 1)
(show-paren-mode 1)
#+END_SRC

Use buffer file name as frame title.
#+BEGIN_SRC elisp
(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))
#+END_SRC

Use ~dark-laptop~ color theme, with a ~black~ background and a ~grey90~ foreground.
#+BEGIN_SRC elisp
(add-to-list 'custom-theme-load-path
             (file-name-as-directory "~/.emacs.d/replace-colorthemes"))
(load-theme 'dark-laptop t t)
(enable-theme 'dark-laptop)
(setq default-frame-alist
       `((background-color . "black")
         (foreground-color . "grey90")))
#+END_SRC

Use ~Consolas~ font in Windows, ~DejaVu Sans Mono~ otherwise.
#+BEGIN_SRC elisp
(cond ((eq window-system 'w32)
           (set-face-font 'default "Consolas-16.0:antialias=natural"))
       (t
           (set-face-font 'default "DejaVu Sans Mono-14.0:antialias=natural")))
#+END_SRC

**** Key-bindings
| ~C-x t~ | Toggle truncate lines.|

#+BEGIN_SRC elisp
(setq-default truncate-lines t)
(global-set-key (kbd "C-x t") 'toggle-truncate-lines)
#+END_SRC

*** Text editing (~init-text.el~)
:PROPERTIES:
:tangle:   init-text.el
:END:

Use 4 spaces for tab indentation.
#+BEGIN_SRC elisp
(setq default-tab-width 4)
(setq-default indent-tabs-mode nil)
#+END_SRC

Overwrite selected region when typing after selection.
#+BEGIN_SRC elisp
(pending-delete-mode 1)
#+END_SRC

Set fill-column width to 79 characters.
#+BEGIN_SRC elisp
(setq-default fill-column 79)
#+END_SRC

Provide a ~cleanup-buffer~ function (untabify + indent + remove trailing whitespaces).
#+BEGIN_SRC elisp
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))
(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))
(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))
#+END_SRC

Provide convenient hooks for programming modes (e.g. for GAMS and python) to automatically untabify and set utf-8-unix coding system before saving.
#+BEGIN_SRC elisp
(defun progmodes-hooks ()
  "Hooks for programming modes"
  (yas/minor-mode-on)
  (add-hook 'before-save-hook 'progmodes-write-hooks))
(defun progmodes-write-hooks ()
  "Hooks which run on file write for programming modes"
  (prog1 nil
    (set-buffer-file-coding-system 'utf-8-unix)
    (untabify-buffer)))
#+END_SRC

Enable disabled commands.
#+BEGIN_SRC elisp
(put 'erase-buffer 'disabled nil)
#+END_SRC

**** Key-bindings
| ~C-x C-a~          | Copy whole buffer.                              |
| ~C-z~              | Copy current line.                              |
| ~C-S-z~            | Clone previous line.                            |
| ~C-M-j~            | Copy a symbolic expression.                     |
| ~C-x n n, C-x n w~ | Restrict editing to region.                     |
| ~C-x C-u~          | Convert region to upper case.                   |
| ~C-x C-l~          | Convert region to lower case                    |

#+BEGIN_SRC elisp
(defun copy-whole-buffer ()
  "Copy entire buffer to clipboard"
  (interactive)
  (clipboard-kill-ring-save (point-min) (point-max)))
(global-set-key (kbd "C-x C-a")  'copy-whole-buffer)

(fset 'copy-line
   "\C-a\C-k\C-y")
(global-set-key (kbd "C-z")  'copy-line)

(fset 'clone-previous-line
   [up ?\C-a ?\C-k ?\C-y down ?\C-a ?\C-y ?\C-a])
(global-set-key (kbd "C-S-z")  'clone-previous-line)

(fset 'copy-sexp
   [?\C-  C-M-right escape ?w C-M-left])
(global-set-key (kbd "C-M-j")  'copy-sexp)

(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

** Customizing add-on features
*** The loader (~init-packages.el~)
:PROPERTIES:
:tangle:   init-packages.el
:END:

Packages defined in ~package-list~ (~init.el~) are automatically installed from MELPA/gnu repositories if missing, and their respective configuration file ~init-mod-${PACKAGE_NAME}.el~ loaded.

#+BEGIN_SRC elisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(require 'cl)
(defun package-list-installed-p ()
  (loop for package in package-list
        when (not (package-installed-p package)) do (return nil)
        finally (return t)))

(unless (package-list-installed-p)
  (message "%s" "Emacs is now refreshing its package database...")
  (package-refresh-contents)
  (message "%s" " done."))
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package))
  (load-library (format "init-mod-%s.el" package)))
#+END_SRC

Entries defined in ~other-package-list~ (~init.el~) are the names of subfolders to be included in ~load-path~, referring to packages outside the repository-based system above. Their respective configuration file ~init-mod-${SUBFOLDER_NAME}.el~ is also loaded.
#+BEGIN_SRC elisp
(dolist (package other-package-list)
  (add-to-list 'load-path (format "~/.emacs.d/%s" package))
  (load-library (format "init-mod-%s.el" package)))
#+END_SRC
* To be cleaned 
** OS integration configuration (~init-os.el~)

- ~open-folder-in-explorer~ opens folder of the buffer file either in Windows
  Explorer or nautilus.
- ~open-cmd-at-folder~ opens a command line (Windows or gnome) at the folder of
  the buffer file.
- ~view-buffer-in-firefox~ opens the buffer file in Firefox.

** Python (~init-python.el~)
:PROPERTIES:
:tangle:   init-python.el
:END:
Use the ~ipython~ interpreter with no arguments.
#+BEGIN_SRC elisp
(setq python-shell-interpreter "ipython")
(setq python-shell-interpreter-args "")
#+END_SRC

Set regular expressions matching the input and output prompt of the ipython shell.
#+BEGIN_SRC elisp
(setq python-shell-prompt-regexp "In \\[[0-9]+\\]: ")
(setq python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: ")
#+END_SRC

Activate auto-completion support.
#+BEGIN_SRC elisp
(setq python-shell-completion-setup-code "from IPython.core.completerlib import module_completion")
(setq python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n")
(setq python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
#+END_SRC

** MATLAB (~init-matlab.el~)
:PROPERTIES:
:tangle:   init-matlab.el
:END:
#+BEGIN_SRC elisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
  (add-to-list
   'auto-mode-alist
   '("\\.m$" . matlab-mode))
  (setq matlab-indent-function t)
  (setq matlab-shell-command "/usr/local/bin/matlab --nodesktop")
#+END_SRC
** LaTeX (~init-latex.el~)
:PROPERTIES:
:tangle:   init-latex.el
:END:

~C-c C-c~ to run LaTeX over your document. Once it has compiled correctly, ~C-c C-c~ again to view it, or if it failed to compile ~C-c `~ to see the errors.

When you have a "master" file including other files with the TeX macro "\input" or the LaTeX macro "\include", to format the document you must run the commands on the top level master file. Assume the current file is a master file itself.
#+BEGIN_SRC elisp
(setq-default TeX-master t)
#+END_SRC

If ~TeX-master~ is set to ~nil~, you will be queried for a master file unless the following text is present at the end of your files.
#+BEGIN_EXAMPLE
%%% Local Variables:
%%% TeX-master: "master"
%%% End:
#+END_EXAMPLE

Enable parsing of buffers at save and load events for extracting meta information, which will be stored in an ~auto~ subdirectory.
#+BEGIN_SRC elisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
#+END_SRC

Activate some useful hooks.
#+BEGIN_SRC elisp
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+END_SRC

Configure reftex.
#+BEGIN_SRC elisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-default-bibliography 
(quote
("~/org/jacklibrary.bib"))) 
#+END_SRC
** Modules
*** helm (~init-mod-helm.el~)

- helm configuration:
  - show buffers list, recent files, files in current dir, and moccur
  - don't use locate under Windows (I haven't been able to find something that doesn't freeze
    up my system)
- helm replacements for common things:
  - ~M-x~ uses helm version
  - ~M-y~ shows kill ring
  - ~Ctrl-h SPC~ shows all mark rings
- helm navigation between buffers and files:
  - ~Ctrl-`~ looks for and opens buffer
  - ~Ctrl-M-`~ looks for and go to semantic section
  - ~Ctrl-\~~ looks for and opens file
  - ~Ctrl-2~ splits window vertically, then switches to buffer in other window
  - ~Ctrl-@~ splits window vertically, then finds file in other window
  - ~Ctrl-3~ splits window horizontally, then switches to buffer in other window
  - ~Ctrl-#~ splits window horizontally, then finds file in other window
  - ~Ctrl-4~ switches to buffer in other window
  - ~Ctrl-$~ finds file in other window
  - ~Ctrl-5~ switches to buffer in other window in reverse order
  - ~Ctrl-%~ finds file in other window

*** yasnippet (~init-mod-yasnippet.el~)

-

*** expand-region (~init-mod-expand-region.el~)
#+BEGIN_SRC elisp
(require 'expand-region)
#+END_SRC

Customize the list of functions that are tried when expanding depending on current mode.


**** Key-bindings
| ~C-=~ | Expand region.                                  |
| ~C-+~ | Contract region.                                |
| ~C-\~ | Copy section around keeping cursor in position. |

#+BEGIN_SRC elisp
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C-+") 'er/contract-region)

(fset 'copy-section-around-keeping-cursor-position
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([C-f1 67108925 134217847 C-f2] 0 "%d")) arg)))
(global-set-key (kbd "C-\\") 'copy-section-around-keeping-cursor-position)
#+END_SRC
*** Visible Bookmarks (~init-mod-bm.el~)
:PROPERTIES:
:tangle:   init-mod-bm.el
:END:
#+BEGIN_SRC elisp
(require 'bm)
#+END_SRC

Navigate bookmarks with assigned keys.
#+BEGIN_SRC elisp
(global-set-key (kbd "<C-f1>") 'bm-toggle)
(global-set-key (kbd "<C-f2>")   'bm-next)
(global-set-key (kbd "<C-f3>") 'bm-previous)
#+END_SRC

Click on fringe to toggle bookmarks, and use mouse wheel to move between them.
#+BEGIN_SRC elisp
(global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
(global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
(global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
#+END_SRC

Cycle bookmark in LIFO order.
#+BEGIN_SRC elisp
(setq bm-in-lifo-order t)
#+END_SRC

Cycle through bookmarks in all open buffers.
#+BEGIN_SRC 
(setq bm-cycle-all-buffers t)
#+END_SRC

Remove bookmark after jump to it by ~bm-next~ or ~bm-previous~.
#+BEGIN_SRC elisp
(setq temporary-bookmark-p t)
#+END_SRC

*** org-mode (~init-mod-org.el~)
:PROPERTIES:
:tangle:   init-mod-org.el
:END:
Org is a mode for keeping notes, maintaining TODO lists, and doing
project planning with a fast and effective plain-text system.

**** General
Load the relevant packages.
#+BEGIN_SRC elisp
(require 'org)
(require 'org-habit)
#+END_SRC
Use org as the default mode for .org, .org_archive, and .txt files.
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC


Single keys can be made to execute commands when the cursor is at the
beginning of a headline, speeding up the navigation.
#+BEGIN_SRC elisp
(setq org-use-speed-commands t)
#+END_SRC

Provide some convenient rebindings.
#+BEGIN_SRC elisp
(defun custom-org-mode-defaults ()
"Executed as org-mode-hook."
(electric-indent-mode -1)
(org-defkey org-mode-map (kbd "M-p") 'org-metaup)
(org-defkey org-mode-map (kbd "M-n") 'org-metadown)
(org-defkey org-mode-map (kbd "C-p") 'org-babel-previous-src-block)
(org-defkey org-mode-map (kbd "C-n") 'org-babel-next-src-block)
(org-defkey org-mode-map (kbd "<prior>") 'org-previous-link)
(org-defkey org-mode-map (kbd "<next>") 'org-next-link)
(org-shifttab 2))
(add-hook 'org-mode-hook 'custom-org-mode-defaults)
#+END_SRC
Speed keys ~n~ and ~p~ are rebind to a tidier view of next/previous entries.
#+BEGIN_SRC elisp
(defun ded/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
(add-to-list 'org-speed-commands-user
             '("n" ded/org-show-next-heading-tidily))
(defun ded/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-on-heading-p))
      (goto-char pos)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
(add-to-list 'org-speed-commands-user 
             '("p" ded/org-show-previous-heading-tidily))
#+END_SRC
**** Tasks
Add a time stamp to the task when moved to DONE.
#+BEGIN_SRC elisp
(setq org-log-done 'time)
#+END_SRC

Set the default workflow keywords (~C-c C-t~ to choose) and their faces.
#+BEGIN_SRC elisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "SOMEDAY(o)" "|" "CANCELLED(c@/!)")))

(setq org-todo-keyword-faces
      '(("TODO"      :foreground "red"     :weight bold)
        ("NEXT"      :foreground "#e9c062" :weight bold) ; "blue"?
        ("DONE"      :foreground "forest green" :weight bold)
        ("WAITING"   :foreground "#fd9b3b" :weight bold)
        ("HOLD"      :foreground "#9b859d" :weight bold)
        ("SOMEDAY"   :foreground "#808080" :weight bold)
        ("CANCELLED" :foreground "#9eb9a7" :weight bold)))
#+END_SRC

**** Clock setup
:LOGBOOK:  
CLOCK: [2015-02-24 Tue 17:00]--[2015-02-24 Tue 17:05] =>  0:05
CLOCK: [2015-02-24 Tue 15:02]--[2015-02-24 Tue 15:30] =>  0:28
:END:      
Most of the clock and time reporting setup is taken from [[http://doc.norang.ca/org-mode.html]] website.

Save the clock history across Emacs sessions, and when you clock into a new task after resuming Emacs, resume it without prompting about what to do with the previous incomplete clock. 
#+BEGIN_SRC elisp
(setq org-clock-persist 'history)
(setq org-clock-persist-query-resume nil)
(org-clock-persistence-insinuate)
#+END_SRC

Show lot of clocking history so it's easy to pick items off with ~C-u C-c C-x C-x~ / ~C-S-F11~.
#+BEGIN_SRC elisp
(setq org-clock-history-length 30)
#+END_SRC

When clocking into task with open clock, resume clock from previous point. 
#+BEGIN_SRC elisp
(setq org-clock-in-resume t)
#+END_SRC

Change task to NEXT when clocking in.
#+BEGIN_SRC elisp
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (oh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (oh/is-project-p))
      "TODO"))))
#+END_SRC

Separate drawers for properties and logs, and save in the latter all clock data and state changes (A drawer opens only with a TAB on the drawer).
#+BEGIN_SRC elisp
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
(setq org-clock-into-drawer t)
#+END_SRC

Remove clock entries with a zero duration.
#+BEGIN_SRC elisp
(setq org-clock-out-remove-zero-time-clocks t)
#+END_SRC

Automatically clock out when moving task to a done state.
#+BEGIN_SRC elisp
(setq org-clock-out-when-done t)
#+END_SRC

Enable auto clock resolution for finding open clocks.
#+BEGIN_SRC elisp
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
#+END_SRC

Include current clocking task in clock reports.
#+BEGIN_SRC elisp
(setq org-clock-report-include-clocking-task t)
#+END_SRC

A default ~Organization~ task in my ~personal-org.org~ logs the time spent reorganizing my org-files, reading email, clearing my inbox, and doing other planning work, all activities that aren't for a specific project. Punching-in anywhere clocks in this Organization task as the default task.
#+BEGIN_SRC elisp
(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))
(defvar bh/organization-task-id "b0605007-6a44-4446-abab-528d429b1483")
#+END_SRC

To change the default clocking task I just visit the new task in any org buffer and clock it in with ~C-u C-u C-c C-x C-i~. Now this new task that collects miscellaneous clock minutes when the clock would normally stop.

To quickly clock in the default clocking task, you can
- press ~C-u C-c C-x C-i d~, or
- repeatedly clock out so the clock moves up the project tree until you clock out the top-level task and the clock moves to the default task. 

I punch in with  at the start of my day. That clocks in the ~Organization task~ by id in my ~org.org~ file. 
To get started we need to punch in which clocks in the default task and keeps the clock running. 
#+BEGIN_SRC elisp
(setq bh/keep-clock-running nil)
(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

#+END_SRC

Add the following key beindings:
| ~F11~   | clock in a task (show menu with prefix) |
| ~S-F11~ | clock out of task |
| ~M-F11~ | Punch Clock In                          |
| ~M-S-F11~ | Punch Clock Out                         |
| ~C-F11~ | go to the currently clocked item        |
| ~C-S-F11~ | show clocked items history |
#+BEGIN_SRC elisp
(global-set-key (kbd "<f11>") 'org-clock-in)
(global-set-key (kbd "S-<f11>") 'org-clock-out)
(global-set-key (kbd "M-<f11>") 'bh/punch-in)
(global-set-key (kbd "M-S-<f11>") 'bh/punch-out)
(global-set-key (kbd "C-<f11>") 'org-clock-goto)
(global-set-key (kbd "C-S-<f11>") '(lambda () (interactive) (org-clock-in '(4)) ))
#+END_SRC

Other code.
#+BEGIN_SRC elisp
(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))
(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))
(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))
(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))
#+END_SRC

**** Time reporting and tracking
To have an agenda clock report for the last month, use ~C-a < a v m b R~. This
- limits the agenda to this one file,
- shows the agenda for a full month,
- moves to last month,
- generates a clock report. 

Change the agenda org clock table settings in clock report mode to
- link the item headlines in the table to their origins;
- set the maximum level depth to which times are listed in the table to 5 levels;
- not show table sections from files which did not contribute;
- indent each headline field according to its level;
- limit the width of the headline column in the org table to 80 characters;

#+BEGIN_SRC elisp
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :indent t :narrow 80)))
#+END_SRC

Set two default headings for column view: Task Effort and Clock_Summary.
#+BEGIN_SRC elisp
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
#+END_SRC

Set global default estimated amounts of time to give to tasks for easy use in column mode.
#+BEGIN_SRC elisp
(setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00"))))
#+END_SRC

To create an estimate for a task or subtree:
- start column mode with ~C-c C-x C-c~;
- collapse the tree with ~c~;
- set the estimated effort value for a task with the quick keys 1 through 9;
- exit column mode with q. 

When generating agenda clock reports, make sure closed tasks and state changes are shown in the agenda.
#+BEGIN_SRC elisp
(setq org-agenda-log-mode-items (quote (closed state)))
#+END_SRC

Use ~l R~ to add the log report (without clocking data lines).
**** Agenda
Use ~F12~ (1 key less than the more common ~C-c a~) anywhere to open the Agenda, which collects TODO items, time-stamped items, and tagged headlines, displaying them in an organized way.
#+BEGIN_SRC elisp
(global-set-key (kbd "<f12>") 'org-agenda)
#+END_SRC

All ~org~ files under a specified directory will be included for agenda display.
#+BEGIN_SRC elisp
(setq org-agenda-files '("~/org"))
#+END_SRC

Include http://github.com/leoc/org-helpers, which provides many methods to configure org-mode easily for the GTD way of organizing tasks.
#+BEGIN_SRC elisp
(add-to-list 'load-path "~/.emacs.d/org-helpers")
(require 'org-helpers)
#+END_SRC

Headings will be named as explained in the table below.
|                         | *is*           | *has*                     | *does not have*  |
|-------------------------+----------------+---------------------------+------------------|
| *Todo Item*             |                | a todo keyword            |                  |
|-------------------------+----------------+---------------------------+------------------|
| *Task*                  | a todo item    |                           | subtask          |
| *Subtask*               | a task         | a parent project          |                  |
| *Single-task*           | a task         |                           | a parent project |
|-------------------------+----------------+---------------------------+------------------|
| *Project*               | a todo item    | a subtask                 |                  |
| *Subproject*            | a project      | a parent project          |                  |
| *Top-project*           | a project      |                           | a parent project |
|-------------------------+----------------+---------------------------+------------------|
| *Stuck Project*         | a project      | a TODO subtask            | a NEXT subtask   |
|-------------------------+----------------+---------------------------+------------------|
| *Inactive Task/Project* | a task/project | SOMEDAY/HOLD/WAITING      |                  |
|                         |                | DONE/CANCELLED todo state |                  |
|                         |                | (or parent has)           |                  |

Add the following key bindings in Agenda mode to provide easy context switches and better overview.
| ~N~ | Restricts the agenda view to the subtree of the current heading.           |
| ~P~ | Restricts the agenda view to the top level project of the current heading. |
| ~W~ | Removes restrictions                                                       |
| ~q~ | Put the Agenda buffer in background as the last candidate for ~other-buffer~.  |
#+BEGIN_SRC elisp
(defun custom-org-agenda-mode-defaults ()
  (org-defkey org-agenda-mode-map "N" 'oh/agenda-restrict-to-subtree)
  (org-defkey org-agenda-mode-map "P" 'oh/agenda-restrict-to-project)
  (org-defkey org-agenda-mode-map "W" 'oh/agenda-remove-restriction)
  (org-defkey org-agenda-mode-map "q" 'bury-buffer))
(add-hook 'org-agenda-mode-hook 'custom-org-agenda-mode-defaults 'append)
#+END_SRC

On the splash screen displayed by the
agenda dispatcher ~C-c a~ provide some convenient GTD-friendly views.
| Key | Header                      | Show                                                               |
|-----+-----------------------------+--------------------------------------------------------------------|
| a   | Agenda                      | Agenda view + all the following                                    |
| r   | Tasks to refile             | Tasks to refile in ~/org/capture.org (blank under restricted view) |
| #   | Stuck Projects              | Active stuck projects w/o schedule/deadline                        |
| n   | Next Tasks                  | Active NEXT non-project items  w/o schedule/deadline               |
| R   | Available Tasks             | Active non-NEXT non-project items w/o schedule/deadline that are   |
|     |                             | - single-tasks under unrestricted view                             |
|     |                             | - subtasks under restricted view                                   |
| p   | Currently Active Projects   | Active non-stuck projects that are                                 |
|     |                             | - top-projects under unrestricted view                             |
|     |                             | - subprojects under restricted view                                |
| w   | Waiting and Postponed Tasks | WAITING/HOLD non-project items                                     |
#+BEGIN_SRC elisp
(setq org-agenda-custom-commands
      '(("a" "Agenda"
       ((agenda "" nil)
          (alltodo ""
                   ((org-agenda-overriding-header "Tasks to Refile")
                    (org-agenda-files '("~/org/capture.org"))
                    (org-agenda-skip-function
                     '(oh/agenda-skip :headline-if-restricted-and '(todo)))))
          (tags-todo "/!-CANCELLED-HOLD-WAITING"
                     ((org-agenda-overriding-header "Stuck Projects")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :subtree-if '(inactive non-project non-stuck-project habit scheduled deadline)))))
          (tags-todo "/NEXT"
                     ((org-agenda-overriding-header "Next Tasks")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :subtree-if '(inactive project habit scheduled deadline)))
                      (org-tags-match-list-sublevels t)
                      (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep))))
          (tags-todo "/!-CANCELLED-NEXT-HOLD-WAITING"
                     ((org-agenda-overriding-header "Available Tasks")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :headline-if '(project)
                                        :subtree-if '(inactive habit scheduled deadline)
                                        :subtree-if-unrestricted-and '(subtask)
                                        :subtree-if-restricted-and '(single-task)))
                      (org-agenda-sorting-strategy '(category-keep))))
          (tags-todo "/!-CANCELLED"
                     ((org-agenda-overriding-header "Currently Active Projects")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :subtree-if '(non-project stuck-project inactive habit)
                                        :headline-if-unrestricted-and '(subproject)
                                        :headline-if-restricted-and '(top-project)))
                      (org-agenda-sorting-strategy '(category-keep))))
          (tags-todo "/!WAITING|HOLD"
                     ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :subtree-if '(project habit))))))
         nil)
        ("r" "Tasks to Refile" alltodo ""
         ((org-agenda-overriding-header "Tasks to Refile")
          (org-agenda-files '("~/org/capture.org"))))
        ("#" "Stuck Projects" tags-todo "/!-CANCELLED-HOLD-WAITING"
         ((org-agenda-overriding-header "Stuck Projects")
          (org-agenda-skip-function
           '(oh/agenda-skip :subtree-if '(inactive non-project non-stuck-project
                                          habit scheduled deadline)))))
        ("n" "Next Tasks" tags-todo "/NEXT"
         ((org-agenda-overriding-header "Next Tasks")
          (org-agenda-skip-function
           '(oh/agenda-skip :subtree-if '(inactive project habit scheduled deadline)))
          (org-tags-match-list-sublevels t)
          (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep))))
        ("R" "Tasks" tags-todo "/!-CANCELLED-NEXT-HOLD-WAITING"
         ((org-agenda-overriding-header "Available Tasks")
          (org-agenda-skip-function
           '(oh/agenda-skip :headline-if '(project)
                            :subtree-if '(inactive habit scheduled deadline)
                            :subtree-if-unrestricted-and '(subtask)
                            :subtree-if-restricted-and '(single-task)))
          (org-agenda-sorting-strategy '(category-keep))))
        ("p" "Projects" tags-todo "/!-CANCELLED"
         ((org-agenda-overriding-header "Currently Active Projects")
          (org-agenda-skip-function
           '(oh/agenda-skip :subtree-if '(non-project inactive habit)))
              (org-agenda-sorting-strategy '(category-keep))
              (org-tags-match-list-sublevels 'indented)))
        ("w" "Waiting Tasks" tags-todo "/!WAITING|HOLD"
         ((org-agenda-overriding-header "Waiting and Postponed Tasks")
          (org-agenda-skip-function '(oh/agenda-skip :subtree-if '(project habit)))))))
#+END_SRC

After an item has been shown from the agenda, show all of its text in the buffer.
#+BEGIN_SRC elisp
(add-hook 'org-agenda-after-show-hook 'show-all)
#+END_SRC

**** Babel
Assign convenient key-bindings for source blocks navigation.
#+BEGIN_SRC elisp
  (global-set-key (kbd "<C-escape>") (kbd "C-c '"))
#+END_SRC

**** Capture
Assign the global key ~F9~ for capture (1 key less than the more popular ~C-c c~).
#+BEGIN_SRC elisp
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

When a capture template specifies a target file that is not an absolute path, or filed away in an interactive way (with ~C-1 C-c C-c~), the path/prompted org file, will then be interpreted relative to ~org-directory~.
#+BEGIN_SRC elisp
(setq org-directory "~/org")
#+END_SRC

Set the default target file for those capture templates that do not specify one.
#+BEGIN_SRC elisp
(setq org-default-notes-file "~/org/capture.org")
#+END_SRC

Here are capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol.
#+BEGIN_SRC elisp
(setq org-capture-templates
      (quote (("t" "todo" entry (file "capture.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "capture.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "capture.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "capture.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "capture.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "capture.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "capture.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

Provide some convenient key bindings to access those templates directly.
#+BEGIN_SRC elisp
(define-key global-map (kbd "<M-f9>")
  (lambda () (interactive) (org-capture nil "t")))
(define-key global-map (kbd "<M-S-f9>")
  (lambda () (interactive) (org-capture nil "r")))
(define-key global-map (kbd "<C-f9>")
  (lambda () (interactive) (org-capture nil "j")))
(define-key global-map (kbd "<C-S-f9>")
  (lambda () (interactive) (org-capture nil "n")))
#+END_SRC


**** Rest
#+BEGIN_SRC elisp
;; * Org-mode

(require 'org-habit)

;; ** Agenda


;; ** Latex
(setq org-latex-pdf-process (list "latexmk -f -pdf %f"))

;; ** Babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t) (emacs-lisp . t) (ditaa . t) (sh . t)))
(setq org-confirm-babel-evaluate nil)
(cond ((eq window-system 'w32)
       (setq org-babel-sh-command "C:/cygwin/bin/sh.exe"))
       (t
        (setq org-babel-sh-command "sh")))
;; this will use emacs syntax higlighting in your #+BEGIN_SRC
;; <language> <your-code> #+END_SRC code blocks.
(setq org-src-fontify-natively t)
(setq org-src-window-setup 'current-window)
(add-to-list 'org-structure-template-alist
             '("p" "#+BEGIN_SRC python :session :results silent\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))
;(setq org-babel-python-command "~/anaconda/bin/ipython --no-banner --classic --no-confirm-exit")
(setq org-babel-python-command "~/anaconda/bin/python")

;; ** Clean view
(setq org-startup-indented t)
(setq org-indent-mode t)
(setq org-hide-leading-stars t)
(defun prettier-org-code-blocks-upper ()
  (interactive)
  (font-lock-add-keywords nil
                          '(("\\(\+BEGIN_SRC\\)"
                             (0 (progn (compose-region (match-beginning 1) (match-end 1) ?¦)
                                       nil))) 
                            ("\\(\+END_SRC\\)"
                             (0 (progn (compose-region (match-beginning 1) (match-end 1) ?¦)
                                       nil))))))
(defun prettier-org-code-blocks-lower ()
  (interactive)
  (font-lock-add-keywords nil
                          '(("\\(^[[:space:]]*#\\+begin_src .*[\r\n]\\)"
                             (0 (progn (compose-region (match-beginning 1) (match-end 1) "")
                                       nil)))
                            ("\\(^[[:space:]]*#\\+end_src[\r\n]\\)"
                             (0 (progn (compose-region (match-beginning 1) (match-end 1) "")
                                       nil))))))
(add-hook 'org-mode-hook 'prettier-org-code-blocks-lower)
(add-hook 'org-mode-hook 'prettier-org-code-blocks-upper)

;; ** Links
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key "\C-c L" 'org-insert-link-global)
(setq org-return-follows-link t) ; <RET> will also follow the link at point

;; ** Refile
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)
; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)
;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; ** Org Key bindings
(global-set-key (kbd "<f2>") (kbd "C-c '"))
(global-set-key (kbd "<C-menu>") (kbd "C-c C-v p"))
(global-set-key (kbd "<C-M-menu>") (kbd "C-c C-v n"))
(global-set-key (kbd "<C-apps>") (kbd "C-c C-v p"))
(global-set-key (kbd "<C-M-apps>") (kbd "C-c C-v n"))
(global-set-key (kbd "<f1>") 'outline-previous-visible-heading)
(global-set-key (kbd "M-p") 'previous-error)
(global-set-key (kbd "M-n") 'next-error)
#+END_SRC

*** zotelo (~init-mod-zotelo.el~)
:PROPERTIES:
:tangle:   init-mod-zotelo.el
:END:
Zotelo helps you efficiently export and synchronize local databases (bib, rdf, html, json etc) and Zotero collections directly from emacs (https://github.com/vspinu/zotelo).
#+BEGIN_SRC elisp
(require 'zotelo)
#+END_SRC

Activate zotelo-minor-mode in LaTeX and org mode:
#+BEGIN_SRC elisp
(add-hook 'TeX-mode-hook 'zotelo-minor-mode)
(add-hook 'org-mode-hook 'zotelo-minor-mode)
#+END_SRC

To export a zotero collection, first associate it with the current buffer with ~C-c z c~ (~zotelo-set-collection~).
To update the the local database with new changes from Zotero, use ~C-c z u~ (~zotelo-update-database~).
Use ~C-c [~ to retrieve items from the bib file.
** Other 
*** Maximize window at startup
#+BEGIN_SRC elisp
;(defun toggle-full-screen () (interactive) (shell-command "%APPDATA%/.emacs.d/emacs_fullscreen.exe"))
;(global-set-key (kbd "M-<f11>") 'toggle-full-screen)
;(add-hook 'window-setup-hook 'toggle-full-screen)
#+END_SRC
*** Grepping
#+BEGIN_SRC elisp
;; ** Grepping
;(keyboard-translate ?\C-i ?\H-i)
;(global-set-key [?\H-i] 'grep-find)
;(grep-apply-setting 'grep-command "grep -r --include=\"!\" -nH -e ! .")
;(setq grep-command  "grep -r --include=\"!\" -nH -e ! .")
#+END_SRC
* DISCLAIMER

THIS SOFTWARE IS PRIVIDED "AS IS" AND COMES WITH NO WARRANTY. USE AT YOUR OWN RISK. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO LOSS OR CORRUPTION OF DATA). USE AT YOUR OWN RISK.
