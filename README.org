#+OPTIONS: toc:t h:4 num:nil
#+PROPERTY: header-args :results silent
* Usage
Given the modular structure of this conf, you may take just those
parts that are of interest to you.

In case you want to try it all, the simplest way is saving your
current configuration and cloning this repository in its place.
#+BEGIN_SRC sh
mv ~/.emacs.d ~/.emacs.d.bak
mv ~/.emacs ~/.emacs.bak
git clone https://github.com/jackjackk/emacs-conf.git ~/.emacs.d
#+END_SRC

Other strategies to merge an existing directory with a git repo can be found [[http://stackoverflow.com/questions/5377960/whats-the-best-practice-to-git-clone-into-an-existing-folder][here]]. In particular:
#+BEGIN_SRC sh
git clone https://github.com/jackjackk/emacs-conf.git ~/.emacs.d/.git --mirror --config core.bare=false
#+END_SRC
will transform your emacs conf dir in a working copy of this repository.
* Description
* The main file (~init.el~)
:PROPERTIES:
:tangle:   init.el
:END:

All conf code is self-contained in =~/.emacs.d= dir. If no =~/.emacs=
file is found, emacs will use =~/.emacs.d/init.el= (tangled from this file). This in
turn call other files in a modular fashion.

Make sure you *decomment just the packages you are interested in*,
otherwise be aware that all missing packages on repositories will be
downloaded and installed on startup, which requires time + internet
bandwidth.

Load the path with configuration files.
#+BEGIN_SRC elisp
(add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC
** Customize built-in features
**** [[file:init-startup.org][Startup]]
#+BEGIN_SRC elisp
(load-library "init-startup.el")
#+END_SRC

**** [[file:init-general.org][General]]
#+BEGIN_SRC elisp
(load-library "init-general.el")
#+END_SRC

**** [[file:init-visual.org][Visual]]
#+BEGIN_SRC elisp
(load-library "init-visual.el")
#+END_SRC

**** [[file:init-text.org][Text]]
#+BEGIN_SRC elisp
(load-library "init-text.el")
#+END_SRC

**** [[file:init-os.org][OS integration]]
#+BEGIN_SRC elisp
(load-library "init-os.el")
#+END_SRC

**** [[file:init-latex.org][LaTeX]]
#+BEGIN_SRC elisp
(load-library "init-latex.el")
#+END_SRC

**** [[file:init-net.org][Network]]
#+BEGIN_SRC elisp
(load-library "init-net.el")
#+END_SRC

**** [[file:macros.el][Macros]]
#+BEGIN_SRC elisp
(load-library "macros.el")
#+END_SRC

**** +[[file:init-python.org][Python]]+
#+BEGIN_SRC elisp
;(load-library "init-python.el")
#+END_SRC
** Add extra packages
*** From official repositories
#+BEGIN_SRC elisp
  (setq package-list '(
#+END_SRC

**** [[file:init-mod-company.org][company]]
#+BEGIN_SRC elisp
                       company
#+END_SRC

**** [[file:init-mod-helm.org][helm]]
#+BEGIN_SRC elisp
                       helm
#+END_SRC

**** [[file:init-mod-yasnippet.org][yasnippet]]
#+BEGIN_SRC elisp
                       yasnippet
#+END_SRC

**** [[file:init-mod-expand-region.org][expand-region]]
#+BEGIN_SRC elisp
                       expand-region
#+END_SRC

**** [[file:init-mod-multiple-cursors.org][multiple-cursors]]
#+BEGIN_SRC elisp
                       multiple-cursors
#+END_SRC

**** Org-mode ([[file:init-mod-org-plus-contrib.org][org-plus-contrib]], [[file:init-mod-ox-textile.org][ox-textile]], +[[file:init-mod-org-redmine.org][org-redmine]]+, +[[file:init-mod-org-pomodoro.org][org-pomodoro]]+, +[[file:init-mod-org2blog.org][org2blog]]+)
#+BEGIN_SRC elisp
                       org-plus-contrib
                       ox-textile
  ;                    org-redmine
  ;                    org-pomodoro
  ;                    org2blog
#+END_SRC


- [ ]
#+BEGIN_SRC elisp
                       zotelo
#+END_SRC

**** +Web dev+ ([[file:init-mod-simple-httpd.org][simple-httpd]], [[file:init-mod-js2-mode.org][js2-mode]], [[file:init-mod-skewer-mode.org][skewer-mode]])
#+BEGIN_SRC elisp
  ;;                     simple-httpd
  ;;                     js2-mode
  ;;                     skewer-mode
#+END_SRC

**** +[[file:init-mod-exec-path-from-shell.org][exec-path-from-shell]]+
#+BEGIN_SRC elisp
  ;;                     exec-path-from-shell
#+END_SRC

**** [[file:init-mod-projectile.org][projectile]], [[file:init-mod-helm-projectile.org][helm-projectile]]
#+BEGIN_SRC elisp
                       projectile
                       helm-projectile
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
                       transpose-frame
#+END_SRC

**** +Python dev+ ([[file:init-mod-elpy.org][elpy]], [[file:init-mod-anaconda-mode.org][anaconda-mode]], [[file:init-mod-company-anaconda.org][company-anaconda]], [[file:init-mod-websocket.org][websocket]] + [[file:init-mod-ein.org][ein]])
#+BEGIN_SRC elisp
  ;                    elpy
  ;                    anaconda-mode
  ;                    company-anaconda
  ;                    websocket
  ;                    ein
#+END_SRC

- [ ] 
#+BEGIN_SRC elisp
  ;                     spray
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
                       ;image+
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
  ;                     eimp
#+END_SRC

**** LaTeX dev ([[file:init-mod-auctex.org][auctex]], [[file:init-mod-latex-preview-pane.org][latex-preview-pane]], [[file:init-mod-cdlatex.org][cdlatex]]
#+BEGIN_SRC elisp
                       auctex
                       latex-preview-pane
                       cdlatex
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
                       ;org-beautify-theme
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
   ;                    android-mode
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
  ;                     neotree
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
                       auctex-latexmk
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
  ;                     org-ref
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
                       toc-org
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
                       column-marker
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
                       magit
#+END_SRC


- [ ]
#+BEGIN_SRC elisp
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
#+END_SRC

- [ ]
#+BEGIN_SRC elisp
  ;;                     bm
#+END_SRC

From local subfolders.
#+BEGIN_SRC elisp
  ))
  (setq other-package-list '(
#+END_SRC

- [ ]
#+BEGIN_SRC elisp

                             thing-edit
                             gams
                             ob-gams
                             ox-wk
                             ;matlab
                             ;speedread
                             ))
#+END_SRC

Call [[file:init-packages.org][init-packages]] to load modules defined above.
#+BEGIN_SRC elisp
  (load-library "init-packages.el")
#+END_SRC
**** The main file

**** Customizing built-in features
- [[file:init-startup.org][Startup]]
- [[file:init-general.org][General]]
- [[file:init-visual.org][Visual]]
- [[file:init-text.org][Text editing]]
- [[file:init-os.org][OS integration]]
- [[file:init-python.org][Python]]
- [[file:init-latex.org][Latex]]
**** Customizing add-on features
***** From repository
- [[file:init-mod-helm.org][helm]]
- [[file:init-mod-org.org][org]]
- [[file:init-mod-magit.org][magit]] 
- [[file:init-mod-zotelo.org][zotelo]]
- [[file:init-mod-projectile.org][projectile]]
- [[file:init-mod-helm-projectile.org][helm-projectile]]
- [[file:init-mod-transpose-frame.org][transpose-frame]]
***** Local
- thing-edit ([[file:init-mod-thing-edit.org][init-mod-thing-edit.el]])
* To be cleaned 
** OS integration configuration (~init-os.el~)

- ~open-folder-in-explorer~ opens folder of the buffer file either in Windows
  Explorer or nautilus.
- ~open-cmd-at-folder~ opens a command line (Windows or gnome) at the folder of
  the buffer file.
- ~view-buffer-in-firefox~ opens the buffer file in Firefox.

** MATLAB (~init-matlab.el~)
:PROPERTIES:
:tangle:   lisp/init-matlab.el
:END:
#+BEGIN_SRC elisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
  (add-to-list
   'auto-mode-alist
   '("\\.m$" . matlab-mode))
  (setq matlab-indent-function t)
  (setq matlab-shell-command "/usr/local/bin/matlab --nodesktop")
#+END_SRC
** LaTeX (~init-latex.el~)
:PROPERTIES:
:tangle:   lisp/init-latex.el
:END:

~C-c C-c~ to run LaTeX over your document. Once it has compiled correctly, ~C-c C-c~ again to view it, or if it failed to compile ~C-c `~ to see the errors.

When you have a "master" file including other files with the TeX macro "\input" or the LaTeX macro "\include", to format the document you must run the commands on the top level master file. Assume the current file is a master file itself.
#+BEGIN_SRC elisp
(setq-default TeX-master t)
#+END_SRC

If ~TeX-master~ is set to ~nil~, you will be queried for a master file unless the following text is present at the end of your files.
#+BEGIN_EXAMPLE
%%% Local Variables:
%%% TeX-master: "master"
%%% End:
#+END_EXAMPLE

Enable parsing of buffers at save and load events for extracting meta information, which will be stored in an ~auto~ subdirectory.
#+BEGIN_SRC elisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
#+END_SRC

Activate some useful hooks.
#+BEGIN_SRC elisp
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+END_SRC

Configure reftex.
#+BEGIN_SRC elisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-default-bibliography 
(quote
("~/org/jacklibrary.bib"))) 
#+END_SRC
** Modules
*** helm (~init-mod-helm.el~)

- helm configuration:
  - show buffers list, recent files, files in current dir, and moccur
  - don't use locate under Windows (I haven't been able to find something that doesn't freeze
    up my system)
- helm replacements for common things:
  - ~M-x~ uses helm version
  - ~M-y~ shows kill ring
  - ~Ctrl-h SPC~ shows all mark rings
- helm navigation between buffers and files:
  - ~Ctrl-`~ looks for and opens buffer
  - ~Ctrl-M-`~ looks for and go to semantic section
  - ~Ctrl-\~~ looks for and opens file
  - ~Ctrl-2~ splits window vertically, then switches to buffer in other window
  - ~Ctrl-@~ splits window vertically, then finds file in other window
  - ~Ctrl-3~ splits window horizontally, then switches to buffer in other window
  - ~Ctrl-#~ splits window horizontally, then finds file in other window
  - ~Ctrl-4~ switches to buffer in other window
  - ~Ctrl-$~ finds file in other window
  - ~Ctrl-5~ switches to buffer in other window in reverse order
  - ~Ctrl-%~ finds file in other window

*** yasnippet (~init-mod-yasnippet.el~)

-

*** expand-region (~init-mod-expand-region.el~)
:PROPERTIES:
:tangle:   lisp/init-mod-expand-region.el
:END:

#+BEGIN_SRC elisp
(require 'expand-region)
#+END_SRC

Customize the list of functions that are tried when expanding regions to support specific modes.
#+BEGIN_SRC elisp
(require 'html-mode-expansions)
(require 'latex-mode-expansions)
(require 'octave-expansions)
(require 'python-mode-expansions)
(require 'text-mode-expansions)
(require 'the-org-mode-expansions)
#+END_SRC

You can also play around with ~er/try-expand-list~.
#+BEGIN_SRC elisp
;(defun er/add-text-mode-expansions ()
;  (make-variable-buffer-local 'er/try-expand-list)
;  (setq er/try-expand-list (append
;                            er/try-expand-list
;                            '(mark-paragraph
;                              mark-page)))
;  ;(setq er/try-expand-list '(mark-paragraph
;  ;                            mark-page))
;)
;(er/enable-mode-expansions 'python-mode 'er/add-text-mode-expansions)
#+END_SRC
**** Key-bindings
| ~C-=~ | Expand region.                                  |
| ~C-+~ | Contract region.                                |

#+BEGIN_SRC elisp
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C-+") 'er/contract-region)
#+END_SRC
*** Visible Bookmarks (~init-mod-bm.el~)
:PROPERTIES:
:tangle:   lisp/init-mod-bm.el
:END:
#+BEGIN_SRC elisp
(require 'bm)
#+END_SRC

Navigate bookmarks with assigned keys.
#+BEGIN_SRC elisp
(global-set-key (kbd "<C-f1>") 'bm-toggle)
(global-set-key (kbd "<C-f2>")   'bm-next)
(global-set-key (kbd "<C-f3>") 'bm-previous)
#+END_SRC

Click on fringe to toggle bookmarks, and use mouse wheel to move between them.
#+BEGIN_SRC elisp
(global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
(global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
(global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
#+END_SRC

Cycle bookmark in LIFO order.
#+BEGIN_SRC elisp
(setq bm-in-lifo-order t)
#+END_SRC

Cycle through bookmarks in all open buffers.
#+BEGIN_SRC 
(setq bm-cycle-all-buffers t)
#+END_SRC

Remove bookmark after jump to it by ~bm-next~ or ~bm-previous~.
#+BEGIN_SRC elisp
(setq temporary-bookmark-p t)
#+END_SRC

*** zotelo (~init-mod-zotelo.el~)
:PROPERTIES:
:tangle:   lisp/init-mod-zotelo.el
:END:
Zotelo helps you efficiently export and synchronize local databases (bib, rdf, html, json etc) and Zotero collections directly from emacs (https://github.com/vspinu/zotelo).
#+BEGIN_SRC elisp
(require 'zotelo)
#+END_SRC

Activate zotelo-minor-mode in LaTeX and org mode:
#+BEGIN_SRC elisp
(add-hook 'TeX-mode-hook 'zotelo-minor-mode)
(add-hook 'org-mode-hook 'zotelo-minor-mode)
#+END_SRC

To export a zotero collection, first associate it with the current buffer with ~C-c z c~ (~zotelo-set-collection~).
To update the the local database with new changes from Zotero, use ~C-c z u~ (~zotelo-update-database~).
Use ~C-c [~ to retrieve items from the bib file.

*** simple-httpd (~init-mod-simple-httpd.el~)
:PROPERTIES:
:tangle:   lisp/init-mod-simple-httpd.el
:END:
Pure elisp HTTP server
#+BEGIN_SRC elisp
(require 'simple-httpd)
#+END_SRC

#+BEGIN_SRC elisp
(setq httpd-root "/home/jack/web")
#+END_SRC
*** js2-mode (~init-mod-js2-mode.el~)
:PROPERTIES:
:tangle:   lisp/init-mod-js2-mode.el
:END:
js2-mode is a JavaScript mode for Emacs with JavaScript parser built-in which allows syntax error detection on the fly.
#+BEGIN_SRC elisp
(require 'js2-mode)
#+END_SRC

Enable js2-mode or js2-minor-mode.
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+END_SRC
*** skewer (~init-mod-skewer.el~)
:PROPERTIES:
:tangle:   lisp/init-mod-skewer-mode.el
:END:
Skewer provides live interaction with JavaScript, CSS, and HTML in a web browser.
#+BEGIN_SRC elisp
(require 'skewer-mode)
#+END_SRC

Configure all of mode hooks.
#+BEGIN_SRC elisp
(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)
#+END_SRC
*** gams (~init-mod-gams.el~)
:PROPERTIES:
:tangle:   lisp/init-mod-gams.el
:END:
GAMS mode for Emacs written by Shirotakeda.
#+BEGIN_SRC elisp
(require 'gams)
#+END_SRC

Configure mode.
#+BEGIN_SRC elisp
;;needed for correct coloring in multiline regions of code
(setq jit-lock-chunk-size 50000)

(setq gams-indent-on t)
(setq gams-indent-number 4)
(setq gams-template-file "~/.emacs.d/lisp/gams/gams-template.txt")
(setq gams:process-command-option "ll=0 lo=3 pw=32767 ps=0")
(setq gams-statement-upcase nil) ; Use upper case for GAMS statements
(setq gams-dollar-control-upcase nil) ; Use upper case for dollar operations.
(setq gams-close-double-quotation-always t)
(setq gams-close-single-quotation-always t)
(setq gams-eolcom-symbol-default' "#")
;(setq font-lock-support-mode '((gams-mode . nil) (t . jit-lock-mode)))

;; OS specific configuration
(cond ((eq window-system 'w32)
       (setq gams:process-command-name "C:/GAMS/win64/24.4/gams.exe")
       (setq gams-system-directory "C:/GAMS/win64/24.4/")
       (setq gams-docs-directory "C:/GAMS/win64/24.4/docs/")
       (setq gams-docs-view-program "C:/Program Files (x86)/Adobe/Acrobat 11.0/Acrobat/AcroRd32.exe")
       (setq gams-lxi-command-name "~/.emacs.d/lisp/gams/lxi/gamslxi.exe")
       (setq gams-lxi-import-command-name "~/.emacs.d/lisp/gams/lxi/gamslxi-import.exe")
       (setq gams-ol-external-program "~/.emacs.d/lisp/gams/external/gamsolc.exe"))
       (t
       (setq gams:process-command-name "/opt/gams/24.2/gams")
       (setq gams-system-directory "/opt/gams/24.2")
       (setq gams-docs-directory "/opt/gams/24.2/docs/")
       (setq gams-docs-view-program "evince")
       (setq gams-lxi-command-name "~/.emacs.d/lisp/gams/lxi/gamslxi")
       (setq gams-lxi-import-command-name "~/.emacs.d/lisp/gams/lxi/gamslxi-import")
       (setq gams-ol-external-program "~/.emacs.d/lisp/gams/external/gamsolc")
))
#+END_SRC
** Other 
*** Maximize window at startup
#+BEGIN_SRC elisp
;(defun toggle-full-screen () (interactive) (shell-command "%APPDATA%/.emacs.d/emacs_fullscreen.exe"))
;(global-set-key (kbd "M-<f11>") 'toggle-full-screen)
;(add-hook 'window-setup-hook 'toggle-full-screen)
#+END_SRC
*** Grepping
#+BEGIN_SRC elisp
;; ** Grepping
;(keyboard-translate ?\C-i ?\H-i)
;(global-set-key [?\H-i] 'grep-find)
;(grep-apply-setting 'grep-command "grep -r --include=\"!\" -nH -e ! .")
;(setq grep-command  "grep -r --include=\"!\" -nH -e ! .")
#+END_SRC
* Useful references
- http://www.emacswiki.org/emacs/Reference_Sheet_by_Aaron_Hawley
* DISCLAIMER

THIS SOFTWARE IS PRIVIDED "AS IS" AND COMES WITH NO WARRANTY. USE AT YOUR OWN RISK. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO LOSS OR CORRUPTION OF DATA). USE AT YOUR OWN RISK.
