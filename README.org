#+OPTIONS: toc:t h:4 num:nil
#+PROPERTY: header-args :results silent

* My emacs configuration

Cumulated over years, all the elisp configuration lines I found interesting for
my workflow in their tidiest form I could come up with, both for Windows and Linux.

* Usage

#+BEGIN_SRC sh
git clone https://github.com/jackjackk/emacs-conf.git ~/.emacs.d
mv ~/.emacs ~/.emacs.bak
#+END_SRC

* Features

** Modular configuration files

- ~init.el~ is the main configuration file.
- ~init-XXX.el~ contain Emacs customizations. Each one is loaded in ~init.el~
  via a ~(load-library "init-XXX.el")~.
- Packages defined in ~package-list~ (~init.el~) are automatically installed
  from MELPA if missing,
  and their respective configuration file ~init-mod-XXX.el~ loaded.
- Entries defined in ~other-package-list~ (~init.el~) are the names of subfolders
  to be included in ~load-path~, referring to packages outside the MELPA
  system. Their respective configuration file ~init-mod-XXX.el~ is also loaded.
- The mechanism for loading packages is contained in ~init-packages.el~.

** Startup configuration (~init-startup.el~)

- Start Emacs server to accept client processes (e.g. IPython).
- Remove startup messages.
- Clean the scratch buffer.

** General configuration (~init-general.el~)

- One character yes-no answer.
- Save temporary files in a unique directory.
- ~<F5>~ reverts buffer w/o confirmation.
- Switch across windows.
  - ~<Ctrl-Tab>~ switches focus to other window.
  - ~<Shift-Ctrl-Tab>~ switches focus to other window in reverse.
  - ~<Ctrl-0>~ deletes current window and switches to previous.
  - ~<Ctrl-1>~ expands current window.
- Resizing windows.
  - ~<Shift-Ctrl-LeftArr>~ shrinks window horizontally.
  - ~<Shift-Ctrl-RightArr>~ enlarges window horizontally.
  - ~<Shift-Ctrl-UpArr>~ shrinks window vertically.
  - ~<Shift-Ctrl-DownArr>~ enlarges window vertically.

** Visual configuration (~init-visual.el~)

- Long lines.
  - Divide long logical line into two or more screen lines in ~text~ mode.
  - ~<Ctrl-x t>~ toggles truncate lines.
- Disable:
  - scroll, menu and tool bar;
  - cursor blinking.
- Show:
  - matching parentheses highlight;
  - column and line numbers;
  - empty line markers;
  - buffer file name as frame title.
- Use ~dark-laptop~ color theme, with a ~black~ background and a ~grey90~ foreground.
- Use ~Consolas~ font in Windows, ~DejaVu Sans Mono~ otherwise.

** Text editing configuration (~init-text.el~)

- 4 spaces for tab indentation.
- Overwrite selected region when typing after selection.
- Fill-column width is set to 79 characters.
- ~<Ctrl-u Ctrl-i>~ for grepping.
- ~<Ctrl-x Ctrl-a>~ copies whole buffer.
- ~<Ctrl-z>~ copies current line.
- ~<Ctrl-Shift-z>~ clones previous line.
- ~<Ctrl-Meta-j>~ copies a symbolic expression.
- Provide ~cleanup-buffer~ function.
- Enable disabled commands (~narrow-to-region~, ~upcase-region~,
  ~downcase-region~ and ~erase-baffer~).

** OS integration configuration (~init-os.el~)

- ~open-folder-in-explorer~ opens folder of the buffer file either in Windows
  Explorer or nautilus.
- ~open-cmd-at-folder~ opens a command line (Windows or gnome) at the folder of
  the buffer file.
- ~view-buffer-in-firefox~ opens the buffer file in Firefox.

** Modules

*** helm (~init-mod-helm.el~)

- helm configuration:
  - show buffers list, recent files, files in current dir, and moccur
  - don't use locate under Windows (I haven't been able to find something that doesn't freeze
    up my system)
- helm replacements for common things:
  - ~<M-x>~ uses helm version
  - ~<M-y>~ shows kill ring
  - ~<Ctrl-h SPC>~ shows all mark rings
- helm navigation between buffers and files:
  - ~<Ctrl-`>~ looks for and opens buffer
  - ~<Ctrl-M-`>~ looks for and go to semantic section
  - ~<Ctrl-\~>~ looks for and opens file
  - ~<Ctrl-2>~ splits window vertically, then switches to buffer in other window
  - ~<Ctrl-@>~ splits window vertically, then finds file in other window
  - ~<Ctrl-3>~ splits window horizontally, then switches to buffer in other window
  - ~<Ctrl-#>~ splits window horizontally, then finds file in other window
  - ~<Ctrl-4>~ switches to buffer in other window
  - ~<Ctrl-$>~ finds file in other window
  - ~<Ctrl-5>~ switches to buffer in other window in reverse order
  - ~<Ctrl-%>~ finds file in other window

*** yasnippet (~init-mod-yasnippet.el~)

-

*** org-mode (~init-mod-org.el~)
:PROPERTIES:
:tangle:   init-mod-org.el
:END:
Org is a mode for keeping notes, maintaining TODO lists, and doing
project planning with a fast and effective plain-text system.

**** General
Load the relevant packages.
#+BEGIN_SRC elisp
(require 'org)
(require 'org-habit)
#+END_SRC
Use org as the default mode for .org, .org_archive, and .txt files.
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC


Single keys can be made to execute commands when the cursor is at the
beginning of a headline, speeding up the navigation.
#+BEGIN_SRC elisp
(setq org-use-speed-commands t)
#+END_SRC

Provide some convenient rebindings.
#+BEGIN_SRC elisp
(defun custom-org-mode-defaults ()
"Executed as org-mode-hook."
(electric-indent-mode -1)
(org-defkey org-mode-map (kbd "M-p") 'org-metaup)
(org-defkey org-mode-map (kbd "M-n") 'org-metadown)
(org-defkey org-mode-map (kbd "C-p") 'org-babel-previous-src-block)
(org-defkey org-mode-map (kbd "C-n") 'org-babel-next-src-block)
(org-shifttab 2))
(add-hook 'org-mode-hook 'custom-org-mode-defaults)
#+END_SRC
Speed keys ~n~ and ~p~ are rebind to a tidier view of next/previous entries.
#+BEGIN_SRC elisp
(defun ded/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
(add-to-list 'org-speed-commands-user
             '("n" ded/org-show-next-heading-tidily))
(defun ded/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-on-heading-p))
      (goto-char pos)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
(add-to-list 'org-speed-commands-user 
             '("p" ded/org-show-previous-heading-tidily))
#+END_SRC

**** Tasks
Add a time stamp to the task when moved to DONE.
#+BEGIN_SRC elisp
(setq org-log-done 'time)
#+END_SRC

Set the default workflow keywords (~C-c C-t~ to choose) and their faces.
#+BEGIN_SRC elisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "SOMEDAY(o)" "|" "CANCELLED(c@/!)")))

(setq org-todo-keyword-faces
      '(("TODO"      :foreground "red"     :weight bold)
        ("NEXT"      :foreground "#e9c062" :weight bold) ; "blue"?
        ("DONE"      :foreground "forest green" :weight bold)
        ("WAITING"   :foreground "#fd9b3b" :weight bold)
        ("HOLD"      :foreground "#9b859d" :weight bold)
        ("SOMEDAY"   :foreground "#808080" :weight bold)
        ("CANCELLED" :foreground "#9eb9a7" :weight bold)))
#+END_SRC

**** Clock setup
Most of the clock and time reporting setup is taken from [[http://doc.norang.ca/org-mode.html]] website.

Save the clock history across Emacs sessions, and when you clock into a new task after resuming Emacs, resume it without prompting about what to do with the previous incomplete clock. 
#+BEGIN_SRC elisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-clock-persist-query-resume nil)
#+END_SRC

Show lot of clocking history so it's easy to pick items off with ~C-u C-c C-x C-x~ / ~C-F11~.
#+BEGIN_SRC elisp
(setq org-clock-history-length 30)
#+END_SRC

When clocking into task with open clock, resume clock from previous point. 
#+BEGIN_SRC elisp
(setq org-clock-in-resume t)
#+END_SRC

Change task to NEXT when clocking in.
#+BEGIN_SRC elisp
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (oh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (oh/is-project-p))
      "TODO"))))
#+END_SRC

Separate drawers for properties and logs, and save in the latter all clock data and state changes (A drawer opens only with a TAB on the drawer).
#+BEGIN_SRC elisp
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
(setq org-clock-into-drawer t)
#+END_SRC

Remove clock entries with a zero duration.
#+BEGIN_SRC elisp
(setq org-clock-out-remove-zero-time-clocks t)
#+END_SRC

Automatically clock out when moving task to a done state.
#+BEGIN_SRC elisp
(setq org-clock-out-when-done t)
#+END_SRC

Enable auto clock resolution for finding open clocks.
#+BEGIN_SRC elisp
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
#+END_SRC

Include current clocking task in clock reports.
#+BEGIN_SRC elisp
(setq org-clock-report-include-clocking-task t)
#+END_SRC

A default ~Organization~ task in my ~personal-org.org~ logs the time spent reorganizing my org-files, reading email, clearing my inbox, and doing other planning work, all activities that aren't for a specific project. Punching-in anywhere clocks in this Organization task as the default task.
#+BEGIN_SRC elisp
(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))
(defvar bh/organization-task-id "b0605007-6a44-4446-abab-528d429b1483")
#+END_SRC

To change the default clocking task I just visit the new task in any org buffer and clock it in with ~C-u C-u C-c C-x C-i~. Now this new task that collects miscellaneous clock minutes when the clock would normally stop.

To quickly clock in the default clocking task, you can
- press ~C-u C-c C-x C-i d~, or
- repeatedly clock out so the clock moves up the project tree until you clock out the top-level task and the clock moves to the default task. 

I punch in with  at the start of my day. That clocks in the ~Organization task~ by id in my ~org.org~ file. 
To get started we need to punch in which clocks in the default task and keeps the clock running. 
#+BEGIN_SRC elisp
(setq bh/keep-clock-running nil)
(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

#+END_SRC

Add the following key beindings:
| ~F11~     | go to the currently clocked item        |
| ~M-F11~  | clock in a task (show menu with prefix) |
| ~C-F11~   | Punch Clock In                          |
|           |                                         |
#+BEGIN_SRC elisp
(global-set-key (kbd "<f11>") 'org-clock-in)
(global-set-key (kbd "S-<f11>") 'org-clock-out)
(global-set-key (kbd "M-<f11>") 'bh/punch-in)
(global-set-key (kbd "M-S-<f11>") 'bh/punch-out)
(global-set-key (kbd "C-<f11>") 'org-clock-goto)
#+END_SRC

Other code.
#+BEGIN_SRC elisp
(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))
(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))
(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))
(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))
#+END_SRC

**** Time reporting and tracking
To have an agenda clock report for the last month, use ~C-a < a v m b R~. This
- limits the agenda to this one file,
- shows the agenda for a full month,
- moves to last month,
- generates a clock report. 

Change the agenda org clock table settings in clock report mode to
- link the item headlines in the table to their origins;
- set the maximum level depth to which times are listed in the table to 5 levels;
- not show table sections from files which did not contribute;
- indent each headline field according to its level;
- limit the width of the headline column in the org table to 80 characters;

#+BEGIN_SRC elisp
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :indent t :narrow 80)))
#+END_SRC

Set two default headings for column view: Task Effort and Clock_Summary.
#+BEGIN_SRC elisp
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
#+END_SRC

Set global default estimated amounts of time to give to tasks for easy use in column mode.
#+BEGIN_SRC elisp
(setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00"))))
#+END_SRC

To create an estimate for a task or subtree:
- start column mode with ~C-c C-x C-c~;
- collapse the tree with ~c~;
- set the estimated effort value for a task with the quick keys 1 through 9;
- exit column mode with q. 

When generating agenda clock reports, make sure closed tasks and state changes are shown in the agenda.
#+BEGIN_SRC elisp
(setq org-agenda-log-mode-items (quote (closed state)))
#+END_SRC

Use ~l R~ to add the log report (without clocking data lines).
**** Agenda
Use ~F12~ (1 key less than the more common ~C-c a~) anywhere to open the Agenda, which collects TODO items, time-stamped items, and tagged headlines, displaying them in an organized way.
#+BEGIN_SRC elisp
(global-set-key (kbd "<f12>") 'org-agenda)
#+END_SRC

All ~org~ files under a specified directory will be included for agenda display.
#+BEGIN_SRC elisp
(setq org-agenda-files '("~/org"))
#+END_SRC

Include http://github.com/leoc/org-helpers, which provides many methods to configure org-mode easily for the GTD way of organizing tasks.
#+BEGIN_SRC elisp
(add-to-list 'load-path "~/.emacs.d/org-helpers")
(require 'org-helpers)
#+END_SRC

Headings will be named as explained in the table below.
|                         | *is*           | *has*                     | *does not have*  |
|-------------------------+----------------+---------------------------+------------------|
| *Todo Item*             |                | a todo keyword            |                  |
|-------------------------+----------------+---------------------------+------------------|
| *Task*                  | a todo item    |                           | subtask          |
| *Subtask*               | a task         | a parent project          |                  |
| *Single-task*           | a task         |                           | a parent project |
|-------------------------+----------------+---------------------------+------------------|
| *Project*               | a todo item    | a subtask                 |                  |
| *Subproject*            | a project      | a parent project          |                  |
| *Top-project*           | a project      |                           | a parent project |
|-------------------------+----------------+---------------------------+------------------|
| *Stuck Project*         | a project      | a TODO subtask            | a NEXT subtask   |
|-------------------------+----------------+---------------------------+------------------|
| *Inactive Task/Project* | a task/project | SOMEDAY/HOLD/WAITING      |                  |
|                         |                | DONE/CANCELLED todo state |                  |
|                         |                | (or parent has)           |                  |

Add the following key bindings in Agenda mode to provide easy context switches and better overview.
| ~N~ | Restricts the agenda view to the subtree of the current heading.           |
| ~P~ | Restricts the agenda view to the top level project of the current heading. |
| ~W~ | Removes restrictions                                                       |
| ~q~ | Put the Agenda buffer in background as the last candidate for ~other-buffer~.  |
#+BEGIN_SRC elisp
(defun custom-org-agenda-mode-defaults ()
  (org-defkey org-agenda-mode-map "N" 'oh/agenda-restrict-to-subtree)
  (org-defkey org-agenda-mode-map "P" 'oh/agenda-restrict-to-project)
  (org-defkey org-agenda-mode-map "W" 'oh/agenda-remove-restriction)
  (org-defkey org-agenda-mode-map "q" 'bury-buffer))
(add-hook 'org-agenda-mode-hook 'custom-org-agenda-mode-defaults 'append)
#+END_SRC

On the splash screen displayed by the
agenda dispatcher ~C-c a~ provide some convenient GTD-friendly views.
| Key | Header                      | Show                                                               |
|-----+-----------------------------+--------------------------------------------------------------------|
| a   | Agenda                      | Agenda view + all the following                                    |
| r   | Tasks to refile             | Tasks to refile in ~/org/capture.org (blank under restricted view) |
| #   | Stuck Projects              | Active stuck projects w/o schedule/deadline                        |
| n   | Next Tasks                  | Active NEXT non-project items  w/o schedule/deadline               |
| R   | Available Tasks             | Active non-NEXT non-project items w/o schedule/deadline that are   |
|     |                             | - single-tasks under unrestricted view                             |
|     |                             | - subtasks under restricted view                                   |
| p   | Currently Active Projects   | Active non-stuck projects that are                                 |
|     |                             | - top-projects under unrestricted view                             |
|     |                             | - subprojects under restricted view                                |
| w   | Waiting and Postponed Tasks | WAITING/HOLD non-project items                                     |
#+BEGIN_SRC elisp
(setq org-agenda-custom-commands
      '(("a" "Agenda"
       ((agenda "" nil)
          (alltodo ""
                   ((org-agenda-overriding-header "Tasks to Refile")
                    (org-agenda-files '("~/org/capture.org"))
                    (org-agenda-skip-function
                     '(oh/agenda-skip :headline-if-restricted-and '(todo)))))
          (tags-todo "/!-CANCELLED-HOLD-WAITING"
                     ((org-agenda-overriding-header "Stuck Projects")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :subtree-if '(inactive non-project non-stuck-project habit scheduled deadline)))))
          (tags-todo "/NEXT"
                     ((org-agenda-overriding-header "Next Tasks")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :subtree-if '(inactive project habit scheduled deadline)))
                      (org-tags-match-list-sublevels t)
                      (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep))))
          (tags-todo "/!-CANCELLED-NEXT-HOLD-WAITING"
                     ((org-agenda-overriding-header "Available Tasks")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :headline-if '(project)
                                        :subtree-if '(inactive habit scheduled deadline)
                                        :subtree-if-unrestricted-and '(subtask)
                                        :subtree-if-restricted-and '(single-task)))
                      (org-agenda-sorting-strategy '(category-keep))))
          (tags-todo "/!-CANCELLED"
                     ((org-agenda-overriding-header "Currently Active Projects")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :subtree-if '(non-project stuck-project inactive habit)
                                        :headline-if-unrestricted-and '(subproject)
                                        :headline-if-restricted-and '(top-project)))
                      (org-agenda-sorting-strategy '(category-keep))))
          (tags-todo "/!WAITING|HOLD"
                     ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                      (org-agenda-skip-function
                       '(oh/agenda-skip :subtree-if '(project habit))))))
         nil)
        ("r" "Tasks to Refile" alltodo ""
         ((org-agenda-overriding-header "Tasks to Refile")
          (org-agenda-files '("~/org/capture.org"))))
        ("#" "Stuck Projects" tags-todo "/!-CANCELLED-HOLD-WAITING"
         ((org-agenda-overriding-header "Stuck Projects")
          (org-agenda-skip-function
           '(oh/agenda-skip :subtree-if '(inactive non-project non-stuck-project
                                          habit scheduled deadline)))))
        ("n" "Next Tasks" tags-todo "/NEXT"
         ((org-agenda-overriding-header "Next Tasks")
          (org-agenda-skip-function
           '(oh/agenda-skip :subtree-if '(inactive project habit scheduled deadline)))
          (org-tags-match-list-sublevels t)
          (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep))))
        ("R" "Tasks" tags-todo "/!-CANCELLED-NEXT-HOLD-WAITING"
         ((org-agenda-overriding-header "Available Tasks")
          (org-agenda-skip-function
           '(oh/agenda-skip :headline-if '(project)
                            :subtree-if '(inactive habit scheduled deadline)
                            :subtree-if-unrestricted-and '(subtask)
                            :subtree-if-restricted-and '(single-task)))
          (org-agenda-sorting-strategy '(category-keep))))
        ("p" "Projects" tags-todo "/!-CANCELLED"
         ((org-agenda-overriding-header "Currently Active Projects")
          (org-agenda-skip-function
           '(oh/agenda-skip :subtree-if '(non-project inactive habit)))
              (org-agenda-sorting-strategy '(category-keep))
              (org-tags-match-list-sublevels 'indented)))
        ("w" "Waiting Tasks" tags-todo "/!WAITING|HOLD"
         ((org-agenda-overriding-header "Waiting and Postponed Tasks")
          (org-agenda-skip-function '(oh/agenda-skip :subtree-if '(project habit)))))))
#+END_SRC

After an item has been shown from the agenda, show all of its text in the buffer.
#+BEGIN_SRC elisp
(add-hook 'org-agenda-after-show-hook 'show-all)
#+END_SRC

**** Babel
Assign convenient key-bindings for source blocks navigation.
#+BEGIN_SRC elisp

#+END_SRC
**** Rest
#+BEGIN_SRC elisp
;; * Org-mode

(require 'org-habit)

;; ** Agenda



(load-library "init-mod-org-capture.el")


;; ** Tasks

;; ** Latex
(setq org-latex-pdf-process (list "latexmk -f -pdf %f"))

;; ** Babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t) (emacs-lisp . t) (ditaa . t) (sh . t)))
(setq org-confirm-babel-evaluate nil)
(cond ((eq window-system 'w32)
       (setq org-babel-sh-command "C:/cygwin/bin/sh.exe"))
       (t
        (setq org-babel-sh-command "sh")))
;; this will use emacs syntax higlighting in your #+BEGIN_SRC
;; <language> <your-code> #+END_SRC code blocks.
(setq org-src-fontify-natively t)
(setq org-src-window-setup 'current-window)
(add-to-list 'org-structure-template-alist
             '("p" "#+BEGIN_SRC python :session :results silent\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))
;(setq org-babel-python-command "~/anaconda/bin/ipython --no-banner --classic --no-confirm-exit")
(setq org-babel-python-command "~/anaconda/bin/python")

;; ** Clean view
(setq org-startup-indented t)
(setq org-indent-mode t)
(setq org-hide-leading-stars t)
(defun prettier-org-code-blocks-upper ()
  (interactive)
  (font-lock-add-keywords nil
                          '(("\\(\+BEGIN_SRC\\)"
                             (0 (progn (compose-region (match-beginning 1) (match-end 1) ?¦)
                                       nil))) 
                            ("\\(\+END_SRC\\)"
                             (0 (progn (compose-region (match-beginning 1) (match-end 1) ?¦)
                                       nil))))))
(defun prettier-org-code-blocks-lower ()
  (interactive)
  (font-lock-add-keywords nil
                          '(("\\(^[[:space:]]*#\\+begin_src .*[\r\n]\\)"
                             (0 (progn (compose-region (match-beginning 1) (match-end 1) "")
                                       nil)))
                            ("\\(^[[:space:]]*#\\+end_src[\r\n]\\)"
                             (0 (progn (compose-region (match-beginning 1) (match-end 1) "")
                                       nil))))))
(add-hook 'org-mode-hook 'prettier-org-code-blocks-lower)
(add-hook 'org-mode-hook 'prettier-org-code-blocks-upper)

;; ** Links
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key "\C-c L" 'org-insert-link-global)
(setq org-return-follows-link t) ; <RET> will also follow the link at point

;; ** Refile
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)
; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)
;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; ** Org Key bindings
(global-set-key (kbd "<f2>") (kbd "C-c '"))
(global-set-key (kbd "<C-menu>") (kbd "C-c C-v p"))
(global-set-key (kbd "<C-M-menu>") (kbd "C-c C-v n"))
(global-set-key (kbd "<M-apps>") (kbd "C-c '"))
(global-set-key (kbd "<C-apps>") (kbd "C-c C-v p"))
(global-set-key (kbd "<C-M-apps>") (kbd "C-c C-v n"))
(global-set-key (kbd "<f1>") 'outline-previous-visible-heading)
(global-set-key (kbd "M-p") 'previous-error)
(global-set-key (kbd "M-n") 'next-error)

#+END_SRC

* DISCLAIMER

THIS SOFTWARE IS PRIVIDED "AS IS" AND COMES WITH NO WARRANTY. USE AT YOUR OWN RISK. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO LOSS OR CORRUPTION OF DATA). USE AT YOUR OWN RISK.
