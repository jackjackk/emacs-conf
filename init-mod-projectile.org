* Projectile [[lisp/init-mod-projectile.el][.el]]
:PROPERTIES:
:header-args: :tangle   lisp/init-mod-projectile.el
:END:

[[http://batsov.com/projectile/][Projectile]] is a project interaction library for Emacs.

| ~C-; f~   | Display project files. With ~C-u~ clear the cache first.         |
| ~C-; d~   | Display project directories. With ~C-u~ clear the cache first.   |
| ~C-; T~   | Display project test files(specs, features, etc).                |
| ~C-; l~   | Display files in a directory (that's not necessarily a project). |
| ~C-; g~   | grep on project files.                                           |
| ~C-; b~   | Display all project buffers currently open.                      |
| ~C-; o~   | multi-occur on all project buffers currently open.               |
| ~C-; r~   | Interactive query-replace on all files in the projects.          |
| ~C-; i~   | Invalidate the project cache (if existing).                      |
| ~C-; R~   | Regenerate the projects TAGS file.                               |
| ~C-; k~   | Kill all project buffers.                                        |
| ~C-; D~   | Open the root of the project in dired.                           |
| ~C-; e~   | Shows a list of recently visited project files.                  |
| ~C-; a~   | Run ack on the project (requires ack-and-a-half).                |
| ~C-; c~   | Run a standard compilation command for your type of project.     |
| ~C-; p~   | Run a standard test command for your type of project.            |
| ~C-; z~   | Add the currently visited to the cache.                          |
| ~C-; s~   | Display a list of known projects you can switch to.              |
| ~C-; C-h~ | Keybindings help.                                                |

Enable Projectile globally.
#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
#+END_SRC

Make Projectile more accessible.
#+BEGIN_SRC emacs-lisp
(setq projectile-keymap-prefix [(control ?\;)])
#+END_SRC

Use helm as completion system.
#+BEGIN_SRC emacs-lisp
(setq projectile-completion-system 'helm)
#+END_SRC

Discover projects.
#+BEGIN_SRC emacs-lisp
  ;https://github.com/bbatsov/projectile/issues/1165
  ;plus support for list of directories
  (defun projectile-discover-projects-in-directory (directory-list)
    "Discover any projects in DIRECTORY and add them to the projectile cache.
  This function is not recursive and only adds projects with roots
  at the top level of DIRECTORY."
    (interactive
     (list (read-directory-name "Starting directory: ")))
    (dolist (directory directory-list) 
    (let ((subdirs (directory-files directory t)))
      (mapcar
       (lambda (dir)
         (when (and (file-directory-p dir)
                    (not (member (file-name-nondirectory dir) '(".." "."))))
           (let ((default-directory dir)
                 (projectile-cached-project-root dir))
             (when (projectile-project-p)
               (projectile-add-known-project (projectile-project-root))))))
       subdirs))))
  (projectile-discover-projects-in-directory (list "~/working" "~/tools"))
#+END_SRC

Follow symbolic links.
#+BEGIN_SRC emacs-lisp
(setq projectile-git-command "git ls-files -zco --exclude-standard;find -L archive -type f -print0 2>/dev/null")
#+END_SRC

#+BEGIN_SRC emacs-lisp
;https://emacs.stackexchange.com/a/9611
(defvar projectile-main-project nil)

(defun use-main-project (&rest args)
  "Skip calling `projectile-project-root' when there is a main project defined."
  (when projectile-main-project
    projectile-main-project))

(advice-add #'projectile-project-root :before-until #'use-main-project)

(defun reset-main-project ()
  (interactive)
  (setq projectile-main-project nil))

(defun set-main-project (&optional dir)
  "Set the projectile main project based on the current buffer.
When called with argument DIR, make that main project instead."
  (interactive)
  (if dir
      (setq projectile-main-project dir)
      (let ((current-project))
        (let ((projectile-main-project nil))
          (setq current-project (projectile-project-root)))
        (setq projectile-main-project current-project))))

(advice-add #'projectile-switch-project :before-until #'reset-main-project)
#+END_SRC

#+RESULTS:
: set-main-project

#+BEGIN_SRC emacs-lisp
(setq projectile-switch-project-action '(lambda () (interactive) (set-main-project) (let ((readme-file (concat (file-name-as-directory projectile-main-project) "README.org"))) (if (file-exists-p readme-file) (progn (org-agenda-set-restriction-lock) (org-todo-list)) (helm-projectile)) (magit-status))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun projectile-project-buffer-p (buffer project-root)
  "Check if BUFFER is under PROJECT-ROOT."
  (with-current-buffer buffer
    (and (not (string-prefix-p " " (buffer-name buffer)))
         (not (projectile-ignored-buffer-p buffer))
         (string-equal (file-remote-p default-directory)
                       (file-remote-p project-root))
         (not (string-match-p "^http\\(s\\)?://" default-directory))
         (string-prefix-p project-root (buffer-file-name) (eq system-type 'windows-nt)))))
#+END_SRC
