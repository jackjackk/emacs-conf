* org-mode (~init-mod-org-plus-contrib.el~)
:PROPERTIES:
:tangle:   lisp/init-mod-org-plus-contrib.el
:END:
Org is a mode for keeping notes, maintaining TODO lists, and doing
project planning with a fast and effective plain-text system.

General
| M-p           | metaup                       |
| M-n           | metadown                     |
| C-p           | Previous src block           |
| C-n           | Next src block               |
| <prior>       | Previous link                |
| <next>        | Next link                    |
| n (speed-key) | Show next heading tidily     |
| p (speed-key) | Show previous heading tidily |

Tasks
| C-c C-t | Choose keyword |

Clock
| ~F11~     | clock in a task (show menu with prefix) |
| ~S-F11~   | clock out of task                       |
| ~M-F11~   | Punch Clock In                          |
| ~M-S-F11~ | Punch Clock Out                         |
| ~C-F11~   | go to the currently clocked item        |
| ~C-S-F11~ | show clocked items history              |

Babel
| ~C-S-s~    | Tangle file.                                                            |
| ~C-Esc~    | Source block editing.                                                   |
| ~C-<pipe>~ | Copy surrounding region and send a ~%paste~ command to adjacent buffer. |
** General
#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'org-contribdir)
(require 'ox)
#+END_SRC

Use org as the default mode for .org, .org_archive, and .txt files.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC

Single keys can be made to execute commands when the cursor is at the
beginning of a headline, speeding up the navigation.
#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

Interpret "_" and "^" for display only with braces.
#+BEGIN_SRC emacs-lisp
(setq org-use-sub-superscripts (quote {}))
#+END_SRC

Show entities as UTF8 characters.
#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)    
#+END_SRC

When loading a new Org file:
- don't fold headlines (to speed up);
#+BEGIN_SRC emacs-lisp
(setq org-startup-folded nil)
#+END_SRC
- show inline images;
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

Open docx w/ external program.
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps
        '(("\\.docx\\'" . default)
          ("\\.html\\'" . default)
          ("\\.pdf\\'" . default)
          (auto-mode . emacs)))
  ; (and not w/ the default choice) http://stackoverflow.com/a/8836108/789593.
  ;(add-hook 'org-mode-hook
  ;      '(lambda ()
  ;         (delete '("\\.pdf\\'" . default) org-file-apps)
  ;         (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))
#+END_SRC

Allow local variable definitions.
#+BEGIN_SRC emacs-lisp
(setq org-export-allow-bind-keywords t)
#+END_SRC
Example:
#+BEGIN_EXAMPLE
#+BIND: org-latex-default-figure-position "H"
#+BIND: org-latex-image-default-width ""
#+END_EXAMPLE

Make yasnippet work in org-mode.
#+BEGIN_SRC emacs-lisp
  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
  (add-hook 'org-mode-hook
            (lambda ()
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)))
#+END_SRC

Make windmove work in org-mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

Provide some convenient rebindings.
#+BEGIN_SRC emacs-lisp
(defun custom-org-mode-defaults ()
"Executed as org-mode-hook."
(electric-indent-mode -1)
(org-defkey org-mode-map (kbd "M-p") 'org-metaup)
(org-defkey org-mode-map (kbd "M-n") 'org-metadown)
(org-defkey org-mode-map (kbd "C-p") 'org-babel-previous-src-block)
(org-defkey org-mode-map (kbd "C-n") 'org-babel-next-src-block)
(org-defkey org-mode-map (kbd "<prior>") 'org-previous-link)
(org-defkey org-mode-map (kbd "<next>") 'org-next-link)
(org-shifttab 2))
(add-hook 'org-mode-hook 'custom-org-mode-defaults)
#+END_SRC

Speed keys ~n~ and ~p~ are rebind to a tidier view of next/previous entries.
#+BEGIN_SRC emacs-lisp
(defun ded/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
(add-to-list 'org-speed-commands-user
             '("n" ded/org-show-next-heading-tidily))
(defun ded/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-on-heading-p))
      (goto-char pos)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
(add-to-list 'org-speed-commands-user 
             '("p" ded/org-show-previous-heading-tidily))
#+END_SRC

Update Org document to new export blocks syntax (2015/12), i.e. 
#+BEGIN_SRC org :tangle no
  ,#+BEGIN_EXPORT backend
  ...
  ,#+END_EXPORT

  ,#+INCLUDE: "file.org" export html
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (defun org-repair-export-blocks ()
      "Repair export blocks and INCLUDE keywords in current buffer."
      (when (eq major-mode 'org-mode)
        (let ((case-fold-search t)
              (back-end-re (regexp-opt
                            '("HTML" "ASCII" "LATEX" "ODT" "MARKDOWN" "MD" "ORG"
                              "MAN" "BEAMER" "TEXINFO" "GROFF" "KOMA-LETTER")
                            t)))
          (org-with-wide-buffer
           (goto-char (point-min))
           (let ((block-re (concat "^[ \t]*#\\+BEGIN_" back-end-re)))
             (save-excursion
               (while (re-search-forward block-re nil t)
                 (let ((element (save-match-data (org-element-at-point))))
                   (when (eq (org-element-type element) 'special-block)
                     (save-excursion
                       (goto-char (org-element-property :end element))
                       (save-match-data (search-backward "_"))
                       (forward-char)
                       (insert "EXPORT")
                       (delete-region (point) (line-end-position)))
                     (replace-match "EXPORT \\1" nil nil nil 1))))))
           (let ((include-re
                  (format "^[ \t]*#\\+INCLUDE: .*?%s[ \t]*$" back-end-re)))
             (while (re-search-forward include-re nil t)
               (let ((element (save-match-data (org-element-at-point))))
                 (when (and (eq (org-element-type element) 'keyword)
                            (string= (org-element-property :key element) 
                                     "INCLUDE"))
                   (replace-match "EXPORT \\1" nil nil nil 1)))))))))
#+END_SRC

Switch buffer to visit an entry given its ID.
#+BEGIN_SRC emacs-lisp
(defun open-id (id)
  (org-id-goto id)
  (message "%s" (current-buffer)))
#+END_SRC
** Display
When outputting a pdf from a src block, use imagemagick to make
org-display-inline-images work with pdf.
#+BEGIN_SRC emacs-lisp
;(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
;(add-to-list 'image-file-name-extensions "pdf")
;(setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
;(setq org-image-actual-width 600)
#+END_SRC

Show org-mode bullets as UTF-8 characters.
#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

Archive files under subfolder archived.
#+BEGIN_SRC emacs-lisp
(setq org-archive-location "archived/%s_archive::")
#+END_SRC
** Tags
When doing a tag/todo search, list also sublevels of matching headlines.
#+BEGIN_SRC emacs-lisp
(setq org-tags-match-list-sublevels 'indented)
#+END_SRC
** Tasks
Add a time stamp to the task when moved to DONE.
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-todo-list-sublevels t)
#+END_SRC

Switching a TODO entry to DONE will be blocked if
- it has undone TODO children;
- any prior sibling is not yet done and parent has an :ORDERED: property;
- parent is blocked because of ordered siblings.
Same for checkboxes.
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-enforce-todo-checkbox-dependencies t)
#+END_SRC

Set the default workflow keywords (~C-c C-t~ to choose) and their faces.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "SOMEDAY(o)" "|" "CANCELLED(c@/!)")))

(setq org-todo-keyword-faces
      '(("TODO"      :foreground "red"     :weight bold)
        ("NEXT"      :foreground "#e9c062" :weight bold) ; "blue"?
        ("DONE"      :foreground "forest green" :weight bold)
        ("WAITING"   :foreground "#fd9b3b" :weight bold)
        ("HOLD"      :foreground "#9b859d" :weight bold)
        ("SOMEDAY"   :foreground "#808080" :weight bold)
        ("CANCELLED" :foreground "#9eb9a7" :weight bold)))
#+END_SRC

Use the fast todo selection scheme with ~C-c C-t~ (letters are assigned when
configuring keywords, adding them afterwards in parenthesis, e.g. ~TODO(t)~).
#+BEGIN_SRC emacs-lisp
(setq org-use-fast-todo-selection t)
#+END_SRC

[[http://orgmode.org/worg/org-contrib/org-checklist.html][org-checklist]] provides two actions which can be triggered when a task is marked done:
- clearing the state of all checkboxes in the task (~:RESET_CHECK_BOXES: t~);
- creating, and optionally printing, a file containing a copy of the task with
  all items in the checked state removed.
#+BEGIN_SRC emacs-lisp
  (require 'org-checklist)
#+END_SRC

** Clock setup
:LOGBOOK:  
CLOCK: [2015-02-24 Tue 17:00]--[2015-02-24 Tue 17:05] =>  0:05
CLOCK: [2015-02-24 Tue 15:02]--[2015-02-24 Tue 15:30] =>  0:28
:END:      
Most of the clock and time reporting setup is taken from [[http://doc.norang.ca/org-mode.html]] website.

Save the clock history across Emacs sessions, and when you clock into a new task after resuming Emacs, resume it without prompting about what to do with the previous incomplete clock. 
#+BEGIN_SRC emacs-lisp
(setq org-clock-persist 'history)
(setq org-clock-persist-query-resume nil)
(org-clock-persistence-insinuate)
#+END_SRC

Show lot of clocking history so it's easy to pick items off with ~C-u C-c C-x C-x~ / ~C-S-F11~.
#+BEGIN_SRC emacs-lisp
(setq org-clock-history-length 30)
#+END_SRC

When clocking into task with open clock, resume clock from previous point. 
#+BEGIN_SRC emacs-lisp
(setq org-clock-in-resume t)
#+END_SRC

Change task to NEXT when clocking in.
#+BEGIN_SRC emacs-lisp
  ;(setq org-clock-in-switch-to-state "NEXT")
#+END_SRC

Separate drawers for properties and logs, and save in the latter all clock data and state changes (A drawer opens only with a TAB on the drawer).
#+BEGIN_SRC emacs-lisp
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
(setq org-clock-into-drawer t)
#+END_SRC

Remove clock entries with a zero duration.
#+BEGIN_SRC emacs-lisp
(setq org-clock-out-remove-zero-time-clocks t)
#+END_SRC

Automatically clock out when moving task to a done state.
#+BEGIN_SRC emacs-lisp
(setq org-clock-out-when-done t)
#+END_SRC

Enable auto clock resolution for finding open clocks.
#+BEGIN_SRC emacs-lisp
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
#+END_SRC

Include current clocking task in clock reports.
#+BEGIN_SRC emacs-lisp
(setq org-clock-report-include-clocking-task t)
#+END_SRC

To change the default clocking task I just visit the new task in any org buffer and clock it in with ~C-u C-u C-c C-x C-i~. Now this new task that collects miscellaneous clock minutes when the clock would normally stop.

To quickly clock in the default clocking task, you can
- press ~C-u C-c C-x C-i d~, or
- repeatedly clock out so the clock moves up the project tree until you clock out the top-level task and the clock moves to the default task. 

Add convenient key beindings.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f11>") 'org-clock-in)
(global-set-key (kbd "S-<f11>") 'org-clock-out)
(global-set-key (kbd "C-<f11>") 'org-clock-goto)
(global-set-key (kbd "C-S-<f11>") '(lambda () (interactive) (org-clock-in '(4)) ))
#+END_SRC
** Logging
Insert state change notes and time stamps into a ~LOGBOOK~ drawer.
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer "LOGBOOK")
#+END_SRC
** Time reporting and tracking
To have an agenda clock report for the last month, use ~C-a < a v m b R~. This
- limits the agenda to this one file,
- shows the agenda for a full month,
- moves to last month,
- generates a clock report. 

Change the agenda org clock table settings in clock report mode to
- link the item headlines in the table to their origins;
- set the maximum level depth to which times are listed in the table to 5 levels;
- not show table sections from files which did not contribute;
- indent each headline field according to its level;
- limit the width of the headline column in the org table to 80 characters;

#+BEGIN_SRC emacs-lisp
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :indent t :narrow 80)))
#+END_SRC

When generating agenda clock reports, make sure closed tasks and state changes are shown in the agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-log-mode-items (quote (closed state)))
#+END_SRC

Use ~l R~ to add the log report (without clocking data lines).

** Properties and column view
Set two default headings for column view: Task Effort and Clock_Summary.
#+BEGIN_SRC emacs-lisp
(setq org-columns-default-format "%60ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM(Current)")
#+END_SRC

Set global default properties values for:
- estimated amounts of time to give to tasks for easy use in column mode;
- styles;
- reset check boxes.
#+BEGIN_SRC emacs-lisp
  (setq org-global-properties
        '(("Effort_ALL" . "0:15 0:30 1:00 2:00 3:00 4:00 5:00 6:00 8:00")
          ("STYLE_ALL" . "habit")
          ("RESET_CHECK_BOXES_ALL" . "t")))
#+END_SRC

To create an estimate for a task or subtree:
- start column mode with ~C-c C-x C-c~;
- collapse the tree with ~c~;
- set the estimated effort value for a task with the quick keys 1 through 9;
- exit column mode with q. 
** Habits
Enable tracking of a special type of TODOs: habits.
#+BEGIN_SRC emacs-lisp
  ;(add-hook 'org-load-hook '(lambda () (add-to-list 'org-modules 'org-habit)))
  (require 'org-habit)
#+END_SRC

The habit TODOs must have a property STYLE set to the value ~habit~. They also need a scheduled date with a:
| .+1m    | for usual habits (e.g. shift the date to one month after today if DONE today);        |
| ++1w    | for habits with time constraints (e.g. it stays on Sunday, looking for the next one); |
| +1w     | for unusual habits that can have a backlog (e.g. weekly report);                      |
| .+2d/3d | for habits w/ min/max frequency ranges.                                               |

In the agenda, habits will appear 

Some extra options.
#+BEGIN_SRC emacs-lisp
(setq org-habit-preceding-days 7
      org-habit-following-days 1
      org-habit-graph-column 80
      org-habit-show-habits-only-for-today t
      org-habit-show-all-today t)
#+END_SRC
** Agenda
Use ~F12~ (1 key less than the more common ~C-c a~) anywhere to open the Agenda, which collects TODO items, time-stamped items, and tagged headlines, displaying them in an organized way.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f12>") 'org-agenda)
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

All *.org files under "~/org" directory will be included for agenda display.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org"))
#+END_SRC

Prevent agenda commands to honor startup options when visiting an agenda file for the first time (for agenda speed up).
#+BEGIN_SRC emacs-lisp
;(setq org-agenda-inhibit-startup t)
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
#+END_SRC

Add packages.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (add-to-list 'org-latex-packages-alist '("" "float"))
  (add-to-list 'org-latex-packages-alist '("" "verbatim"))
#+END_SRC

Use ~latexmk~ to turn tex into pdf.
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process 
'("latexmk -pdflatex=\"pdflatex -interaction nonstopmode\" -pdf -bibtex -f  %f"))
#+END_SRC

Scale up previewed Latex fragments.
#+BEGIN_SRC emacs-lisp
  (plist-put org-format-latex-options :scale 3)
#+END_SRC

Use imagemagick for previewing Latex fragments.
#+BEGIN_SRC emacs-lisp
;  (setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC

Insert within-paragraph Latex snippets with "@@l:...@@".
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
        '(lambda ()
           (add-to-list 'org-export-snippet-translation-alist
                 '("l" . "latex"))))
#+END_SRC

Put every inline image in \begin{center} ... \end{center}.
#+BEGIN_SRC emacs-lisp
(advice-add 'org-latex--inline-image :around
            (lambda (orig link info)
              (concat
               "\\begin{center}"
               (funcall orig link info)
               "\\end{center}")))
#+END_SRC

Change hyper setup with nicer colors, and fixed author.
#+BEGIN_SRC emacs-lisp
(setq org-latex-hyperref-template "\\hypersetup{\n pdfauthor={GM},\n pdftitle={%t},\n pdfkeywords={%k},\n pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks={true},\n urlcolor={blue},\n linkcolor={blue},\n citecolor={blue},\n pdfborder={0 0 0} }\n")
#+END_SRC

Use user-provided labels instead of internal ones.
#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels t)
#+END_SRC

Remove section labels generated by org-mode on latex export. 
#+BEGIN_SRC emacs-lisp
(defun jackjackk/org-latex-remove-section-labels (string backend info)
  "Remove section labels generated by org-mode"
  (when (org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "\\\\label{sec:.*?}" "" string)))

(add-to-list 'org-export-filter-final-output-functions
             'jackjackk/org-latex-remove-section-labels)
#+END_SRC

Converte quotes environments into comment environments on latex export. 
#+BEGIN_SRC emacs-lisp
(defun jackjackk/org-latex-quote-to-comment (string backend info)
  "Translate quote environments into comment environments"
  (when (org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "{quote}" "{comment}" string)))

(add-to-list 'org-export-filter-final-output-functions
             'jackjackk/org-latex-quote-to-comment)
#+END_SRC
** Babel
Make org play nicely with ~ipython~ (commented now).
#+BEGIN_SRC emacs-lisp
; use ipython in org mode
; (setq org-babel-python-command "ipython2 --pylab=qt5 --pdb --nosep --classic 
; --no-banner --no-confirm-exit")

; use %cpaste to paste code into ipython in org mode
;(defadvice org-babel-python-evaluate-session
;(before org-python-use-cpaste
;(session body &optional result-type result-params) activate)
;"Add a %cpaste and '--' to the body, so that ipython does the right
;thing."
;(setq body (concat "%cpaste -q\n" body "\n--")))
#+END_SRC

Convenient key-bindings for source blocks navigation.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-escape>") (kbd "C-c '"))
#+END_SRC


Convenient shortcut for tangling files.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-s") 'org-babel-tangle)
#+END_SRC

Load commonly used languages.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ditaa . t)
     (sh . t)
     (org . t)
     ))

#+END_SRC

Avoid confirmation before evaluation.
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Use ~C-c b~ to run tangle on point.
#+BEGIN_SRC emacs-lisp
    (defun org-babel-tangle-block()
      (interactive)
      (let ((current-prefix-arg '(4)))
         (call-interactively 'org-babel-tangle)))

    (eval-after-load "org"
      '(progn
         (define-key org-mode-map (kbd "C-c b") 'org-babel-tangle-block)))
#+END_SRC
** Capture
Assign the global key ~F9~ for capture (1 key less than the more popular ~C-c c~).
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

When a capture template specifies a target file that is not an absolute path, or filed away in an interactive way (with ~C-1 C-c C-c~), the path/prompted org file, will then be interpreted relative to ~org-directory~.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
#+END_SRC

Set the default target file for those capture templates that do not specify one.
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/org/capture.org")
#+END_SRC

Here are capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol.
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      (quote (("t" "todo" entry (file "capture.org")
               "* TODO %?" :clock-in t :clock-resume t)
              ("p" "I was procrastinating" entry (file+headline "~/org/personal-procrastination.org" "I was procrastinating instead of")
               "* %? %i\n- [ ] Think how the task is relevant and meaningful to your interests and goals\n- [ ] Set reasonable standards to be expected from you in completing the task\n- [ ] Give the right weight to others' evaluation of your work\n- [ ] Be aware of the personal resources you can leverage on to do the job\n- [ ] Decide how much you really want to invest in the task\n- [ ] Feel ready to accept the responsibilities involved?\n- [ ] Spend enough time in defining the outcome and developing the steps needed to accomplish that outcome" :clock-in t :clock-resume t)
              ("l" "I was lazy" entry (file+headline "~/org/personal-procrastination.org" "I was procrastinating instead of")
               "* %? Prova: %^{PROMPT}" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "capture.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "capture.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "capture.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "capture.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "capture.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

Provide some convenient key bindings to access those templates directly.
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "<M-f9>")
  (lambda () (interactive) (org-capture nil "t")))
(define-key global-map (kbd "<M-S-f9>")
  (lambda () (interactive) (org-capture nil "r")))
(define-key global-map (kbd "<C-f9>")
  (lambda () (interactive) (org-capture nil "j")))
(define-key global-map (kbd "<C-S-f9>")
  (lambda () (interactive) (org-capture nil "n")))
#+END_SRC
** Refile
Refiling (~C-c C-w~, or ~w~ speed command) is extremely useful, especially after a capture.

Make all the headlines of all the agenda files up to the 3rd level available as refile targets (helm helps a lot here in getting the right target!).
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets (quote ((nil :maxlevel . 3)
                                   (org-agenda-files :maxlevel . 3))))
#+END_SRC

Choose refiling targets in one step, showing levels as paths including the name of the files they belong to.
#+BEGIN_SRC emacs-lisp
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path 'file)
#+END_SRC
** Export
Don't export w/ TOC by default.
#+BEGIN_SRC emacs-lisp
(setq org-export-with-toc nil)
#+END_SRC

Include other exporters.
#+BEGIN_SRC emacs-lisp
  (require 'ox-odt)
  (require 'ox-freemind)
  (add-to-list 'org-export-backends 'beamer)
  (require 'ox-beamer)
#+END_SRC

Export to docx via pandoc.
#+BEGIN_SRC emacs-lisp
(defun ox-export-to-docx-and-open ()
 "Export the current org file as a docx via markdown."
 (interactive)
 (let* ((bibfile (expand-file-name (car (org-ref-find-bibliography))))
        ;; this is probably a full path
        (current-file (buffer-file-name))
        (basename (file-name-sans-extension current-file))
        (docx-file (concat basename ".docx")))
   (save-buffer)
   (when (file-exists-p docx-file) (delete-file docx-file))
   (shell-command (format
                   "pandoc -s -S --bibliography=%s %s -o %s"
                   bibfile current-file docx-file))
   (org-open-file docx-file '(16))))
#+END_SRC
** Extra
#+BEGIN_SRC emacs-lisp
  (require 'ox-extra)
#+END_SRC

Any headline tagged with the ~ignore~ tag will be ignored (i.e. will not be included in the export).
#+BEGIN_SRC emacs-lisp
  (ox-extras-activate '(ignore-headlines))
#+END_SRC

Allow the use of latex blocks, the contents of which which will be interpreted as #+latex_header lines for export. These blocks should be tagged with ~#+header: :header yes~.
#+BEGIN_SRC emacs-lisp
  (ox-extras-activate '(latex-header-blocks))
#+END_SRC
** Feeds
Make a task out of each new entry in a magazine feed.
#+BEGIN_SRC emacs-lisp
  (setq org-feed-alist
      '(("Nature Climate Change"
         "http://feeds.nature.com/nclimate/rss/current?format=xml"
         "~/org/feeds.org" "Nature Climate Change")))
#+END_SRC
** Rest
#+BEGIN_SRC emacs-lisp
  ;; * Org-mode

  (require 'org-habit)

  ;; ** Agenda


  ;; ** Latex
  ;(setq org-latex-pdf-process (list "latexmk -pdf -bibtex %f"))

  ;; ** Babel
  (cond ((eq window-system 'w32)
         (setq org-babel-sh-command "C:/cygwin/bin/sh.exe"))
         (t
          (setq org-babel-sh-command "sh")))
  ;; this will use emacs syntax higlighting in your #+BEGIN_SRC
  ;; <language> <your-code> #+END_SRC code blocks.
  (setq org-src-fontify-natively t)
  (setq org-src-window-setup 'current-window)
  ;; add <p for python expansion
  (add-to-list 'org-structure-template-alist
               '("p" "#+BEGIN_SRC python\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))
  ;; add <por for python expansion with raw output
  (add-to-list 'org-structure-template-alist
               '("por" "#+BEGIN_SRC python :results output raw\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))
  ;; add <pv for python expansion with value
  (add-to-list 'org-structure-template-alist
               '("pv" "#+BEGIN_SRC python :results value\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))
  ;; add <el for emacs-lisp expansion
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>"))
  ;; add <o for org expansion
  (add-to-list 'org-structure-template-alist
               '("o" "#+BEGIN_SRC org\n?\n#+END_SRC" "<src lang=\"org\">\n?\n</src>"))
  ;; add <sh for shell
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC" "<src lang=\"shell\">\n?\n</src>"))
  ;; add <g for gams expansion
  (add-to-list 'org-structure-template-alist
               '("g" "#+BEGIN_SRC gams\n?\n#+END_SRC" "<src lang=\"gams\">\n?\n</src>"))
  ;(setq org-babel-python-command "~/anaconda/bin/ipython --no-banner --classic --no-confirm-exit")

  ;; ** Clean view
  (setq org-startup-indented t)
  (setq org-indent-mode t)
  (setq org-hide-leading-stars t)
  (defun prettier-org-code-blocks-upper ()
    (interactive)
    (font-lock-add-keywords nil
                            '(("\\(\+BEGIN_SRC\\)"
                               (0 (progn (compose-region (match-beginning 1) (match-end 1) "")
                                         nil))) 
                              ("\\(\+END_SRC\\)"
                               (0 (progn (compose-region (match-beginning 1) (match-end 1) "")
                                         nil))))))
  (defun prettier-org-code-blocks-lower ()
    (interactive)
    (font-lock-add-keywords nil
                            '(("\\(^[[:space:]]*#\\+begin_src .*[\r\n]\\)"
                               (0 (progn (compose-region (match-beginning 1) (match-end 1) "")
                                         nil)))
                              ("\\(^[[:space:]]*#\\+end_src[\r\n]\\)"
                               (0 (progn (compose-region (match-beginning 1) (match-end 1) "")
                                         nil))))))
  (add-hook 'org-mode-hook 'prettier-org-code-blocks-lower)
  (add-hook 'org-mode-hook 'prettier-org-code-blocks-upper)

  ;; ** Links
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key "\C-c L" 'org-insert-link-global)
  (setq org-return-follows-link t) ; <RET> will also follow the link at point

  ;; ** Refile
  ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  ; Allow refile to create parent tasks with confirmation
  ;(setq org-refile-allow-creating-parent-nodes (quote confirm))
  ; Use IDO for both buffer and file completion and ido-everywhere to t
  ;(setq org-completion-use-ido t)
  ;(setq ido-everywhere t)
  ;(setq ido-max-directory-size 100000)
  ;(ido-mode (quote both))
  ; Use the current window when visiting files and buffers with ido
  ;(setq ido-default-file-method 'selected-window)
  ;(setq ido-default-buffer-method 'selected-window)
  ; Use the current window for indirect buffer display
  (setq org-indirect-buffer-display 'current-window)
  ;;;; Refile settings
  ; Exclude DONE state tasks from refile targets

  ;; ** Org Key bindings
  (global-set-key (kbd "<f2>") (kbd "C-c '"))
  (global-set-key (kbd "<C-menu>") (kbd "C-c C-v p"))
  (global-set-key (kbd "<C-M-menu>") (kbd "C-c C-v n"))
  (global-set-key (kbd "<C-apps>") (kbd "C-c C-v p"))
  (global-set-key (kbd "<C-M-apps>") (kbd "C-c C-v n"))
  (global-set-key (kbd "<f1>") 'outline-previous-visible-heading)
  (global-set-key (kbd "M-p") 'previous-error)
  (global-set-key (kbd "M-n") 'next-error)
#+END_SRC
** Not used anymore
:PROPERTIES:
:tangle:   no
:END:
Other code.

I punch in with  at the start of my day. That clocks in the ~Organization task~ by id in my ~org.org~ file. 
To get started we need to punch in which clocks in the default task and keeps the clock running. 
#+BEGIN_SRC emacs-lisp
(setq bh/keep-clock-running nil)
(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))
(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))
(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))
(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))
#+END_SRC


Include https://github.com/remyhonig/org-query, which provides many methods to configure org-mode easily for the GTD way of organizing tasks.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/org-query")
(require 'org-query)
#+END_SRC

Headings will be named as explained in the table below.
|                                |                         | *is*         | *has*                     | *does not have*      |
|--------------------------------+-------------------------+--------------+---------------------------+----------------------|
| (org-query-todo)               | *Task*                  | headline     | todo keyword              |                      |
| (org-query-todo '("NEXT"))     | *Next Task*             | task         | NEXT keyword              |                      |
| (org-query-gtd-refile)         | *Task to refile*        | task         | Inbox parent              |                      |
| (org-query-gtd-loose-task)     | *Loose task*            |              |                           |                      |
|--------------------------------+-------------------------+--------------+---------------------------+----------------------|
|                                | *Project*               | task         | child task                | Someday/Maybe parent |
|                                | *Someday project*       | project      | Someday/Maybe parent      |                      |
| (org-query-gtd-active-project) | *Active project*        | project      | next task                 |                      |
|                                | *Active stuck Project*  |              | TODO subtask              | NEXT subtask         |
|--------------------------------+-------------------------+--------------+---------------------------+----------------------|
|                                | *Inactive Task/Project* | task/project | SOMEDAY/HOLD/WAITING      |                      |
|                                |                         |              | DONE/CANCELLED todo state |                      |
|                                |                         |              | (or parent has)           |                      |

Add the following key bindings in Agenda mode to provide easy context switches and better overview.
| ~N~ | Restricts the agenda view to the subtree of the current heading.           |
| ~P~ | Restricts the agenda view to the top level project of the current heading. |
| ~W~ | Removes restrictions                                                       |
| ~q~ | Put the Agenda buffer in background as the last candidate for ~other-buffer~.  |
#+BEGIN_SRC emacs-lisp
(defun custom-org-agenda-mode-defaults ()
  (org-defkey org-agenda-mode-map "N" 'oh/agenda-restrict-to-subtree)
  (org-defkey org-agenda-mode-map "P" 'oh/agenda-restrict-to-project)
  (org-defkey org-agenda-mode-map "W" 'oh/agenda-remove-restriction)
  (org-defkey org-agenda-mode-map "q" 'bury-buffer))
(add-hook 'org-agenda-mode-hook 'custom-org-agenda-mode-defaults 'append)
#+END_SRC

On the splash screen displayed by the
agenda dispatcher ~C-c a~ provide some convenient GTD-friendly views.
| Key | Header                      | Show                                                               |
|-----+-----------------------------+--------------------------------------------------------------------|
| a   | Agenda                      | Agenda view + all the following                                    |
| r   | Tasks to refile             | Tasks to refile in ~/org/capture.org (blank under restricted view) |
| #   | Stuck Projects              | Active stuck projects w/o schedule/deadline                        |
| n   | Next Tasks                  | Active NEXT non-project items  w/o schedule/deadline               |
| R   | Available Tasks             | Active non-NEXT non-project items w/o schedule/deadline that are   |
|     |                             | - single-tasks under unrestricted view                             |
|     |                             | - subtasks under restricted view                                   |
| p   | Currently Active Projects   | Active non-stuck projects that are                                 |
|     |                             | - top-projects under unrestricted view                             |
|     |                             | - subprojects under restricted view                                |
| w   | Waiting and Postponed Tasks | WAITING/HOLD non-project items                                     |
#+BEGIN_SRC emacs-lisp
(defun rmh/agendablock-tasks-waiting ()
  `(tags-todo "/+WAITING|+DEFERRED"
              ((org-agenda-overriding-header "Tasks waiting for something")
               (org-tags-match-list-sublevels nil)
               (org-agenda-skip-function (org-query-select "headline" (not (org-query-gtd-project))))
               (org-agenda-todo-ignore-scheduled t)
               (org-agenda-todo-ignore-deadlines t)
               )))

(defun rmh/agendablock-next-in-active ()
  `(tags-todo "/+NEXT"
              ((org-agenda-overriding-header "Next tasks in active projects")
               (org-agenda-skip-function (org-query-select "headline" (org-query-gtd-active-project-next-task)))
               (org-tags-match-list-sublevels t)
               (org-agenda-todo-ignore-scheduled 't)
               (org-agenda-todo-ignore-deadlines 't)
               (org-agenda-todo-ignore-with-date 't)
               (org-agenda-sorting-strategy
                '(todo-state-down effort-up category-keep)))))

(defun rmh/agendablock-backlog-of-active ()
  `(tags-todo "/+TODO"
              ((org-agenda-overriding-header "Backlog of active projects")
               (org-agenda-skip-function (org-query-select "headline" (org-query-gtd-backlog-task)))
               (org-agenda-todo-ignore-scheduled 't)
               (org-agenda-todo-ignore-deadlines 't)
               (org-agenda-todo-ignore-with-date 't)
               (org-agenda-sorting-strategy
                '(category-keep)))))

(defun rmh/agendablock-active-projects-without-next ()
  `(tags-todo "/+NEXT"
              ((org-agenda-overriding-header "Active projects without next task")
               (org-agenda-skip-function (org-query-select "tree" (org-query-gtd-active-project-stuck)))
               (org-tags-match-list-sublevels 't)
               (org-agenda-sorting-strategy
                '(category-keep)))))

(defun rmh/agendablock-active-projects-with-next ()
  `(tags-todo "/+NEXT"
              ((org-agenda-overriding-header "Active projects with a next task")
               (org-agenda-skip-function (org-query-select "tree" (org-query-gtd-active-project-armed)))
               (org-tags-match-list-sublevels 't)
               (org-agenda-sorting-strategy
                '(category-keep)))))

(defun rmh/agendablock-waiting-projects ()
  `(tags-todo "/+WAITING"
              ((org-agenda-overriding-header "Waiting projects")
               (org-agenda-skip-function (org-query-select "tree" (org-query-gtd-project)))
               (org-tags-match-list-sublevels 't)
               (org-agenda-sorting-strategy
                '(category-keep)))))

(defun rmh/agendablock-loose-tasks ()
  `(tags-todo "/+TODO"
              ((org-agenda-overriding-header "Tasks not belonging to a project")
               (org-agenda-skip-function
                (org-query-select "headline" (and (org-query-gtd-loose-task) (not (org-is-habit-p)))))
               (org-agenda-todo-ignore-scheduled 't)
               (org-agenda-todo-ignore-deadlines 't)
               (org-agenda-todo-ignore-with-date 't)
               (org-agenda-sorting-strategy
                '(category-keep)))))

(defun rmh/agendablock-checklists ()
  `(tags "CHECKLIST"
         ((org-agenda-overriding-header "Checklists")
          (org-tags-match-list-sublevels nil))))

(defun rmh/agendablock-inbox ()
  `(tags-todo "LEVEL=2"
              ((org-agenda-overriding-header "Tasks to refile")
               (org-agenda-skip-function (org-query-select "tree" (org-query-gtd-refile)))
               (org-tags-match-list-sublevels nil))))


(setq org-agenda-custom-commands
      `((" " "Agenda"
        ((agenda "" ((org-agenda-ndays 1)))
         ,(rmh/agendablock-inbox)
         ,(rmh/agendablock-tasks-waiting)
         ,(rmh/agendablock-next-in-active)
         ,(rmh/agendablock-active-projects-with-next)
         ,(rmh/agendablock-active-projects-without-next)
         ,(rmh/agendablock-waiting-projects)
         ,(rmh/agendablock-backlog-of-active)
         ,(rmh/agendablock-checklists))
        nil)
      ("r" "Review Agenda"
       ((agenda "" ((org-agenda-ndays 1)))
        ,(rmh/agendablock-inbox)
        ,(rmh/agendablock-loose-tasks)
        ,(rmh/agendablock-tasks-waiting)
        ,(rmh/agendablock-next-in-active)
        ,(rmh/agendablock-active-projects-with-next)
        ,(rmh/agendablock-active-projects-without-next)
        ,(rmh/agendablock-backlog-of-active)
        ,(rmh/agendablock-checklists))
       nil)))
#+END_SRC

After an item has been shown from the agenda, show all of its text in the buffer.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-after-show-hook 'show-all)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
  ;(defun bh/clock-in-to-next (kw)
  ;  "Switch a task from TODO to NEXT when clocking in.
  ;Skips capture tasks, projects, and subprojects.
  ;Switch projects and subprojects from NEXT back to TODO"
  ;  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
  ;    (cond
  ;     ((and (member (org-get-todo-state) (list "TODO"))
  ;           (oh/is-task-p))
  ;      "NEXT")
  ;     ((and (member (org-get-todo-state) (list "NEXT"))
  ;           (oh/is-project-p))
  ;      "TODO"))))
#+END_SRC

A default ~Organization~ task in my ~personal-org.org~ logs the time spent reorganizing my org-files, reading email, clearing my inbox, and doing other planning work, all activities that aren't for a specific project. Punching-in anywhere clocks in this Organization task as the default task.
#+BEGIN_SRC emacs-lisp
(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))
(defvar bh/organization-task-id "b0605007-6a44-4446-abab-528d429b1483")
#+END_SRC

#+BEGIN_SRC emacs-lisp
;(global-set-key (kbd "M-<f11>") 'bh/punch-in)
;(global-set-key (kbd "M-S-<f11>") 'bh/punch-out)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC
