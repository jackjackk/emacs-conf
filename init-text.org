* Text editing (~init-text.el~)
:PROPERTIES:
:tangle:   lisp/init-text.el
:END:

| ~M-x copy-whole-buffer~ | Copy whole buffer.                                 |
| ~C-S-z~                 | Clone previous line.                               |
|                         |                                                    |
| ~M-Q~                   | Unfill paragraph.                                  |
|                         |                                                    |
| ~C-x n n, C-x n w~      | Restrict editing to region.                        |
|                         |                                                    |
| ~C-x C-u~               | Convert region to upper case.                      |
| ~C-x C-l~               | Convert region to lower case.                      |
|                         |                                                    |
| ~M-x untabify-buffer~   | Untabify buffer.                                   |
| ~M-x indent-buffer~     | Indent buffer.                                     |
| ~M-x erase-buffer~      | Delete contents of buffer.                         |
| ~M-x cleanup-buffer~    | Untabify + Indent + Delete trailing spaces.        |
|                         |                                                    |
| ~M-x dos2unix~          | Convert end-of-lines according to UNIX convention. |
|                         |                                                    |
| ~f6 \~                  | Insert "‖".                                        |
| ~f6 n~                  | Insert "ℕ".                                        |
| ~f6 r~                  | Insert "ℝ".                                        |
|                         |                                                    |
| ~save-macro~            | Save last macro into macros.el                     |

Use 4 spaces for tab indentation.
#+BEGIN_SRC emacs-lisp
(setq default-tab-width 4)
(setq-default indent-tabs-mode nil)
#+END_SRC

Overwrite selected region when typing after selection.
#+BEGIN_SRC emacs-lisp
(pending-delete-mode 1)
#+END_SRC

Set fill-column width to 70 characters, and add Visual Line mode to text & org modes.
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 54)
;(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Set up visual line mode.
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
  ;(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  ;(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
  ;(add-hook 'LaTeX-mode-hook 'turn-on-visual-line-mode)
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

Provide a ~cleanup-buffer~ function (untabify + indent + remove trailing whitespaces).
#+BEGIN_SRC emacs-lisp
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))
(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))
(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))
#+END_SRC

Provide a function to convert end-of-lines according to UNIX convention with a name easy to remember.
#+BEGIN_SRC emacs-lisp
(defun dos2unix ()
      "Not exactly but it's easier to remember"
      (interactive)
      (set-buffer-file-coding-system 'unix 't) )
#+END_SRC

Provide a function to unfill paragraphs.
#+BEGIN_SRC emacs-lisp
  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  (define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

Prefer UTF-8.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
;(add-to-list 'file-coding-system-alist '("\\.org" . utf-8) )
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-selection-coding-system 'utf-8)
(set-locale-environment "en.UTF-8")
(prefer-coding-system 'utf-8)
(setq utf-translate-cjk-mode nil)
#+END_SRC

Provide convenient hooks for programming modes (e.g. for GAMS and python) to automatically untabify and set utf-8-unix coding system before saving.
#+BEGIN_SRC emacs-lisp
(defun progmodes-hooks ()
  "Hooks for programming modes"
  (yas/minor-mode-on)
  (add-hook 'before-save-hook 'progmodes-write-hooks))
(defun progmodes-write-hooks ()
  "Hooks which run on file write for programming modes"
  (prog1 nil
    (set-buffer-file-coding-system 'utf-8-unix)
    (untabify-buffer)))
#+END_SRC

Enable disabled commands.
#+BEGIN_SRC emacs-lisp
(put 'erase-buffer 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

Copy entire buffer to clipboard.
#+BEGIN_SRC emacs-lisp
(defun copy-whole-buffer ()
  "Copy entire buffer to clipboard"
  (interactive)
  (clipboard-kill-ring-save (point-min) (point-max)))
;(global-set-key (kbd "C-x C-a")  'copy-whole-buffer)
#+END_SRC

Clone previous line.
#+BEGIN_SRC emacs-lisp
(fset 'clone-previous-line
   [up ?\C-a ?\C-k ?\C-y down ?\C-a ?\C-y ?\C-a])
(global-set-key (kbd "C-S-z")  'clone-previous-line)
#+END_SRC

Add math key-bindings.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f6> \\") (lambda () (interactive) (insert "‖")))
(global-set-key (kbd "<f6> n") (lambda () (interactive) (insert "ℕ")))
(global-set-key (kbd "<f6> r") (lambda () (interactive) (insert "ℝ")))
#+END_SRC

Automate process for saving last macro into ~/.emacs.d/macros.el.
#+BEGIN_SRC emacs-lisp
 (defun save-macro (name)
    "save a macro. Take a name as argument
     and save the last defined macro under
     this name at the end of your .emacs"
     (interactive "SName of the macro :")  ; ask for the name of the macro
     (kmacro-name-last-macro name)         ; use this name for the macro
     (find-file "~/.emacs.d/macros.el")    ; open conf file
     (goto-char (point-max))               ; go to the end of the .emacs
     (newline)                             ; insert a newline
     (insert-kbd-macro name)               ; copy the macro
     (newline)                             ; insert a newline
     (switch-to-buffer nil))               ; return to the initial buffer
#+END_SRC
