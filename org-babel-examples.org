* General
** Change permissions on tangled file
http://orgmode.org/manual/tangle_002dmode.html#tangle_002dmode
** Run babel tangle on point
#+BEGIN_SRC emacs-lisp
    (defun org-babel-tangle-block()
      (interactive)
      (let ((current-prefix-arg '(4)))
         (call-interactively 'org-babel-tangle)))

    (eval-after-load "org"
      '(progn
         (define-key org-mode-map (kbd "C-c b") 'org-babel-tangle-block)))
#+END_SRC
** Run code block when loading org-mode document
#+BEGIN_SRC org
  #  -*- find-file-hook: org-babel-execute-buffer -*-
  ,#+BEGIN_SRC emacs-lisp
  (defun handy-stuff(arg)
   (message arg))
  ,#+END_SRC

  [[elisp:(handy-stuff "foo")][foo]]
  [[elisp:(handy-stuff "bar")][bar]]
#+END_SRC
* C
#+BEGIN_SRC org
  ,#+BEGIN_SRC C :includes '(<math.h> <stdio.h>) :flags -lm
  int i=9;
  printf("%d\n",(int)sqrt(i));
  ,#+END_SRC
#+END_SRC
* Elisp
#+BEGIN_SRC org
  ,#+name: my-input
  | el | value      | expected |
  |----+------------+----------|
  | 5  | '(5 5 5 5) | 4        |
  | ...etc...                  |

  ,#+BEGIN_SRC elisp :var input=my-input :results table
  ;; Code that does the calculations in your tblfm line
  ;; `input' is a variable holding your input table
  ,#+END_SRC
#+END_SRC
* Python
#+BEGIN_SRC org
  ,#+NAME: checkfilename
  ,#+HEADER: :var fileout="test--checkfilename.pdf"
  ,#+BEGIN_SRC+BEGIN_SRC python :session :results file
  import numpy as np
  import matplotlib.pyplot as plt
  fig, ax = plt.subplots(1, 1)
  X = np.linspace(1, 10)
  Y = np.sin(X)
  ax.plot(X, Y)
  fig.savefig(fileout)
  plt.close(fig)
  fileout
  ,#+END_SRC
#+END_SRC
* Maxima
#+BEGIN_SRC org
  ,#+name: 3d-maxima
  ,#+header: :file maxima-3d.png
  ,#+header: :exports results
  ,#+header: :results graphics
  ,#+BEGIN_SRC maxima 
    programmode: false;
    plot3d(atan(-x^2+y^3/4),[x,-4,4],[y,-4,4],[grid,50,50],[gnuplot_pm3d,true]);
  ,#+END_SRC
#+END_SRC
